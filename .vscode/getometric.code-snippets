{
    "line": {
        "scope": "go",
        "description": "直線の式",
        "prefix": ["_line handling"],
        "body": [
            "// Line は 直線をあらわす型",
            "type Line struct {",
            "    p1 Pointf",
            "    p2 Pointf",
            "}",
            "",
            "// dist は 点と点の距離を返します。",
            "func dist(x1, y1, x2, y2 float64) float64 {",
            "    x, y := x1 - x2, y1 - y2",
            "    return math.Sqrt(x*x + y*y)",
            "}",
            "",
            "// dist は 直線と点の距離を返します。",
            "func (l Line) dist(p Pointf) float64 {",
            "    x1, y1, x2, y2 := l.p1.x, l.p1.y, l.p2.x, l.p2.y",
            "    d := dist(x1, y1, p.x, p.y)",
            "    d = math.Min(d, dist(x2, y2, p.x, p.y))",
            "    x, y := x1 - x2, y1 - y2",
            "    if x == 0 {",
            "        d = math.Min(d, math.Abs(x1 - p.x))",
            "    } else if y == 0 {",
            "        d = math.Min(d, math.Abs(y1 - p.y))",
            "    } else {",
            "        a := y",
            "        b := -x",
            "        c := x * y1 - y * x1",
            "        d = math.Min(d, math.Abs(a * p.x + b * p.y + c) / math.Sqrt(a*a + b*b))",
            "    }",
            "    return d",
            "}",
        ]
    }
}

{
    "modを使った操作": {
        "scope": "go",
        "prefix": "_mod",
        "description": "modを使った操作",
        "body": [
            "type mint int",
            "",
            "func Mod998244353() mint {",
            "  return mint(998244353)",
            "}",
            "",
            "func Mod1000000007() mint {",
            "  return mint(pow(10, 9)+7)",
            "}",
            "",
            "// normはaをmod mの値に変換します",
            "func (mod mint) norm(a int) int {",
            "  if a < 0 || a >= int(mod) {",
            "    a %= int(mod)",
            "  }",
            "  if a < 0 {",
            "    a += int(mod)",
            "  }",
            "  return a",
            "}",
            "",
            "// addは a+b (mod m)を返します。",
            "func (mod mint) add(a, b int) int {",
            "  ab := a + b",
            "  if ab >= int(mod) {",
            "    ab %= int(mod)",
            "  }",
            "  return ab",
            "}",
            "",
            "// subは a-b (mod m)を返します。",
            "func (mod mint) sub(a, b int) int {",
            "  ab := a - b",
            "  if ab < 0 {",
            "    ab += int(mod)",
            "  }",
            "  return ab",
            "}",
            "",
            "// mulは a*b (mod m)を返します。",
            "func (mod mint) mul(a, b int) int {",
            "  return (a * b) % int(mod)",
            "}",
            "",
            "// powは(x^n) mod m を返します。",
            "func (mod mint) pow(x, n int) int {",
            "  if n == 0 {",
            "    return 1",
            "  }",
            "",
            "  x = x % int(mod)",
            "  if x == 0 {",
            "    return 0",
            "  }",
            "",
            "  ans := 1",
            "  for n > 0 {",
            "    if n%2 == 1 {",
            "      ans = (ans * x) % int(mod)",
            "    }",
            "    x = (x * x) % int(mod)",
            "    n /= 2",
            "  }",
            "",
            "  return ans",
            "}",
            "",
            "// invはmod mにおけるaの逆元を返します。",
            "func (mod mint) inv(a int) int {",
            "  // 拡張ユークリッドの互除法",
            "  b, u, v := int(mod), 1, 0",
            "  for b > 0 {",
            "    t := a / b",
            "    a -= t * b",
            "    a, b = b, a",
            "    u -= t * v",
            "    u, v = v, u",
            "  }",
            "  return mod.norm(u)",
            "}",
            "",
            "// divはa / b (mod m)を返します。",
            "func (mod mint) div(a, b int) int {",
            "  return mod.mul(a, mod.inv(b))",
            "}",
            "",
            "// chaddはa + b (mod m)の結果をaに設定します。",
            "func (mod mint) chadd(a *int, b int) {",
            "  *a = mod.add(*a, b)",
            "}",
            "",
            "// chsubはa - b (mod m)の結果をaに設定します。",
            "func (mod mint) chsub(a *int, b int) {",
            "  *a = mod.sub(*a, b)",
            "}",
            "",
            "// chmulはa * b (mod m)の結果をaに設定します。",
            "func (mod mint) chmul(a *int, b int) {",
            "  *a = mod.mul(*a, b)",
            "}",
            "",
            "// chdivはa / b (mod m)の結果をaに設定します。",
            "func (mod mint) chdiv(a *int, b int) {",
            "  *a = mod.div(*a, b)",
            "}",
            ""
        ]
    },
    "場合の数": {
        "scope": "go",
        "prefix": "_combination",
        "description": "場合の数を提供します",
        "body": [
            "type Combination struct {",
            "  // factはnの階乗を返します。",
            "  fact func(n int) int",
            "",
            "  // nPrはn個のモノからr個取り出して並べる順列の個数を返します。",
            "  nPr func(n, k int) int",
            "",
            "  // nCrはn個のモノからr個取り出す組み合わせの個数を返します。",
            "  nCr func(n, k int) int",
            "",
            "  // nHrはn個のモノから重複を許して取り出す組み合わせの個数を返します。",
            "  nHr func(n, k int) int",
            "}",
            "",
            "func NewComination(nmax, rmax int, mod mint) Combination {",
            "  fact := make([]int, nmax+1)",
            "  ifact := make([]int, nmax+1)",
            "  fact[1] = 1",
            "  for i := 2; i <= nmax; i++ {",
            "    fact[i] = mod.mul(fact[i-1], i)",
            "  }",
            "  ifact[nmax] = mod.inv(fact[nmax])",
            "  for i := nmax; i > 0; i-- {",
            "    ifact[i-1] = mod.mul(ifact[i], i)",
            "  }",
            "",
            "  nCr := func(n, r int) int {",
            "    if n <= 0 || r <= 0 || n < r {",
            "      return 1",
            "    }",
            "    return mod.mul(fact[n], mod.mul(ifact[r], ifact[n-r]))",
            "  }",
            "",
            "  return Combination{",
            "    fact: func(n int) int {",
            "      return fact[n]",
            "    },",
            "    nPr: func(n, r int) int {",
            "      if n <= 0 || r <= 0 || n < r {",
            "        return 1",
            "      }",
            "      return mod.mul(fact[n], ifact[n-r])",
            "    },",
            "    nCr: nCr,",
            "    nHr: func(n, r int) int {",
            "      return nCr(n+r-1, r)",
            "    },",
            "  }",
            "}",
            ""
        ]
    }
}

{
    "場合の数": {
        "scope": "go",
        "prefix": "_combination",
        "description": "場合の数を提供します",
        "body": [
            "type Combination struct {",
            "  // factはnの階乗を返します。",
            "  fact func(n int) int",
            "",
            "  // nPrはn個のモノからr個取り出して並べる順列の個数を返します。",
            "  nPr func(n, k int) int",
            "",
            "  // nCrはn個のモノからr個取り出す組み合わせの個数を返します。",
            "  nCr func(n, k int) int",
            "",
            "  // nHrはn個のモノから重複を許して取り出す組み合わせの個数を返します。",
            "  nHr func(n, k int) int",
            "}",
            "",
            "func NewComination(nmax, rmax int, mod mint) Combination {",
            "  fact := make([]int, nmax+1)",
            "  ifact := make([]int, nmax+1)",
            "  fact[1] = 1",
            "  for i := 2; i <= nmax; i++ {",
            "    fact[i] = mod.mul(fact[i-1], i)",
            "  }",
            "  ifact[nmax] = mod.inv(fact[nmax])",
            "  for i := nmax; i > 0; i-- {",
            "    ifact[i-1] = mod.mul(ifact[i], i)",
            "  }",
            "",
            "  nCr := func(n, r int) int {",
            "    if n <= 0 || r <= 0 || n < r {",
            "      return 1",
            "    }",
            "    return mod.mul(fact[n], mod.mul(ifact[r], ifact[n-r]))",
            "  }",
            "",
            "  return Combination{",
            "    fact: func(n int) int {",
            "      return fact[n]",
            "    },",
            "    nPr: func(n, r int) int {",
            "      if n <= 0 || r <= 0 || n < r {",
            "        return 1",
            "      }",
            "      return mod.mul(fact[n], ifact[n-r])",
            "    },",
            "    nCr: nCr,",
            "    nHr: func(n, r int) int {",
            "      return nCr(n+r-1, r)",
            "    },",
            "  }",
            "}",
            ""
        ]
    }
}

{
    "mo's algorithm": {
        "scope": "go",
        "description": "Mo's algorithm",
        "prefix": "_mo",
        "body": [
            "  type query struct {",
            "    l, r, i, ans int",
            "  }",
            "",
            "  n := in.NextInt()",
            "  a := in.NextInts(n)",
            "  Q := in.NextInt()",
            "  qs := make([]*query, Q)",
            "  for i := 0; i < Q; i++ {",
            "    l, r := in.NextInt2d(-1, 0)",
            "    qs[i] = &query{l, r, i, -1}",
            "  }",
            "",
            "  bs := n / min(n, int(math.Sqrt(float64(Q))))",
            "",
            "  sort.Slice(qs, func(i, j int) bool {",
            "    bi := qs[i].l / bs",
            "    bj := qs[j].l / bs",
            "    if bi != bj {",
            "      return bi < bj",
            "    }",
            "",
            "    if bi%2 == 0 {",
            "      return qs[i].r < qs[j].r",
            "    } else {",
            "      return qs[i].r > qs[j].r",
            "    }",
            "  })",
            "  l, r := 0, 0",
            "  m := make([]bool, n+1)",
            "  t := 0",
            "  for _, q := range qs {",
            "    for l > q.l {",
            "      l--",
            "      // remove element on left",
            "    }",
            "    for r < q.r {",
            "      // add element on right",
            "      r++",
            "    }",
            "    for l < q.l {",
            "            // add element on left",
            "      l++",
            "    }",
            "    for r > q.r {",
            "      r--",
            "      // remove element on right",
            "    }",
            "    q.ans = t",
            "  }",
            "  sort.Slice(qs, func(i, j int) bool { return qs[i].i < qs[j].i })",
            ""
        ]
    }
}

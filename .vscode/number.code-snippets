{
    "greatest common divider in int": {
        "scope": "go",
        "prefix": "_gcd",
        "description": "最大公約数 gcd(int, int) の実装",
        "body": [
            "func gcd(a, b int) int {",
            "    if b > a {",
            "        a, b = b, a",
            "    }",
            "    for b != 0 {",
            "        a, b = b, a%b",
            "    }",
            "    return a",
            "}",
            ""
        ]
    },
    "least common multiple in int": {
        "scope": "go",
        "prefix": "_lcm",
        "description": "最小公倍数 lcm(int, int)の実装",
        "body": [
            "func lcm(a, b int) int {",
            "    return a / gcd(a, b) * b",
            "}",
            ""
        ]
    },
    "dividers asc int": {
        "scope": "go",
        "prefix": "_dividers-asc",
        "description": "nの全約数(昇順) dividersOf(int)の実装",
        "body": [
            "func dividersOf(n int, direction int) []int {",
            "    div1 := make([]int, 0)",
            "    div2 := make([]int, 0)",
            "",
            "    for i := int(1); i*i <= n; i++ {",
            "        if n % i == 0 {",
            "            div1 = append(div1, i)",
            "",
            "            if i != n/i {",
            "                div2 = append(div2, n/i)",
            "            }",
            "        }",
            "    }",
            "    for i := int(0); i < l; i++ {",
            "        div1 = append(div1, div2[l-1-i])",
            "    }",
            "    return div1",
            "}",
            ""
        ]
    },
    "dividers desc int": {
        "scope": "go",
        "prefix": "_dividers-desc",
        "description": "nの全約数(降順) dividersOf(int)の実装",
        "body": [
            "func dividersOf(n int, direction int) []int {",
            "    div1 := make([]int, 0)",
            "    div2 := make([]int, 0)",
            "",
            "    for i := int(1); i*i <= n; i++ {",
            "        if n % i == 0 {",
            "            div1 = append(div1, i)",
            "",
            "            if i != n/i {",
            "                div2 = append(div2, n/i)",
            "            }",
            "        }",
            "    }",
            "    for i := int(0); i < l; i++ {",
            "        div2 = append(div2, div1[l-1-i])",
            "    }",
            "    return div2",
            "}",
            ""
        ]
    },
    "factorize int": {
        "scope": "go",
        "prefix": ["_factorize", "_primefactorize"],
        "description": "nの素因数分解",
        "body": [
            "// PrimeFactor は素因数と指数",
            "type PrimeFactor struct {",
            "    factor int",
            "    exp    int",
            "}",
            "",
            "func factorize(n int) []PrimeFactor {",
            "    factors := make([]PrimeFactor, 0)",
            "    if n%2 == 0 {",
            "        f := PrimeFactor{2, 0}",
            "        factors = append(factors, f)",
            "",
            "        for n%2 == 0 {",
            "            n /= 2",
            "            f.exp++",
            "        }",
            "    }",
            "    for i := int(3); i*i <= n; i++ {",
            "        if n%i != 0 {",
            "            continue",
            "        }",
            "        f := PrimeFactor{i, 0}",
            "        factors = append(factors, f)",
            "",
            "        for n%i == 0 {",
            "            n /= i",
            "            f.exp++",
            "        }",
            "    }",
            "",
            "    if n != 1 {",
            "        factors = append(factors, PrimeFactor{n, 1})",
            "    }",
            "    return factors",
            "}",
            ""
        ]
    },
    "isPrime int": {
        "scope": "go",
        "prefix": "_isprime",
        "description": "nが素数であるかどうか",
        "body": [
            "func isPrime(n int) bool {",
            "    if n == 2 {",
            "        return true",
            "    } else if n < 3 {",
            "        return false",
            "    }",
            "    for i := int(3); i*i <= n; i++ {",
            "        if n % i == 0 {",
            "            return false",
            "        }",
            "    }",
            "    return true",
            "}",
            ""
        ]
    },
    "Next Permutation": {
        "scope": "go",
        "prefix": "_permutation",
        "body": [
            "type Permutation []int",
            "",
            "func (p *Permutation) next() bool {",
            "    for i := len(*p) - 2; i >= 0; i-- {",
            "        if (*p)[i] > (*p)[i+1] {",
            "            continue",
            "        }",
            "        j := len(*p)",
            "        for {",
            "             j--",
            "             if (*p)[i] < (*p)[j] {",
            "                 break",
            "             }",
            "        }",
            "        (*p)[i], (*p)[j] = (*p)[j], (*p)[i]",
            "        for k, l := i+1, len(*p)-1; k < l; k, l = k+1, l-1 {",
            "            (*p)[k], (*p)[l] = (*p)[l], (*p)[k]",
            "        }",
            "        return true",
            "",
            "    }",
            "    return false",
            "}",
        ]
    },
    "Chinese Remainder Theorem": {
        "scope": "go",
        "prefix": ["_chineseremaindertheorem", "_crt"],
        "description": "中国剰余定理の実装",
        "body": [
            "// crtは中国剰余定理の実装です。",
            "// x = b[i] mod m[i]",
            "// となる x mod lcm(m) を計算し、 x, lcm(m) を返します。",
            "// 解なしの場合は 0, 0を返します。",
            "func crt(b, m []int) (int, int) {",
            "    b0, m0 := 0, 1",
            "    invgcd := func(a, m int) (int, int) {",
            "        x, u := 1, 0",
            "        for m != 0 {",
            "            t := a / m",
            "            a, m = m, a-t*m",
            "            x, u = u, x-t*u",
            "        }",
            "        return a, x",
            "    }",
            "    for i := 0; i < len(b); i++ {",
            "        b1, m1 := b[i], m[i]",
            "        if m0 < m1 {",
            "            b0, b1 = b1, b0",
            "            m0, m1 = m1, m0",
            "        }",
            "        if m0%m1 == 0 {",
            "            if b0%m1 != b1 {",
            "                return 0, 0",
            "            }",
            "            continue",
            "        }",

            "        g, im := invgcd(m0, m1)",
            "        if (b1-b0)%g != 0 {",
            "            return 0, 0",
            "        }",
            "        u := m1 / g",
            "        x := (b1 - b0) / g % u * im % u",
            "        b0 += m0 * x",
            "        m0 *= u",
            "    }",
            "    return (b0%m0 + m0) % m0, m0",
            "}"
        ]
    }
}

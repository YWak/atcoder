{
    "dividers asc int": {
        "scope": "go",
        "prefix": "_dividers-asc",
        "description": "nの全約数(昇順) dividersOf(int)の実装",
        "body": [
            "func dividersOf(n int, direction int) []int {",
            "    div1 := make([]int, 0)",
            "    div2 := make([]int, 0)",
            "",
            "    for i := int(1); i*i <= n; i++ {",
            "        if n % i == 0 {",
            "            div1 = append(div1, i)",
            "",
            "            if i != n/i {",
            "                div2 = append(div2, n/i)",
            "            }",
            "        }",
            "    }",
            "    for i := int(0); i < l; i++ {",
            "        div1 = append(div1, div2[l-1-i])",
            "    }",
            "    return div1",
            "}",
            ""
        ]
    },
    "dividers desc int": {
        "scope": "go",
        "prefix": "_dividers-desc",
        "description": "nの全約数(降順) dividersOf(int)の実装",
        "body": [
            "func dividersOf(n int, direction int) []int {",
            "    div1 := make([]int, 0)",
            "    div2 := make([]int, 0)",
            "",
            "    for i := int(1); i*i <= n; i++ {",
            "        if n % i == 0 {",
            "            div1 = append(div1, i)",
            "",
            "            if i != n/i {",
            "                div2 = append(div2, n/i)",
            "            }",
            "        }",
            "    }",
            "    for i := int(0); i < l; i++ {",
            "        div2 = append(div2, div1[l-1-i])",
            "    }",
            "    return div2",
            "}",
            ""
        ]
    },
    "factorize int": {
        "scope": "go",
        "prefix": ["_factorize", "_primefactorize"],
        "description": "nの素因数分解",
        "body": [
            "// PrimeFactor は素因数と指数",
            "type PrimeFactor struct {",
            "    factor int",
            "    exp    int",
            "}",
            "",
            "func factorize(n int) []PrimeFactor {",
            "    factors := make([]PrimeFactor, 0)",
            "    if n%2 == 0 {",
            "        f := PrimeFactor{2, 0}",
            "        factors = append(factors, f)",
            "",
            "        for n%2 == 0 {",
            "            n /= 2",
            "            f.exp++",
            "        }",
            "    }",
            "    for i := int(3); i*i <= n; i++ {",
            "        if n%i != 0 {",
            "            continue",
            "        }",
            "        f := PrimeFactor{i, 0}",
            "        factors = append(factors, f)",
            "",
            "        for n%i == 0 {",
            "            n /= i",
            "            f.exp++",
            "        }",
            "    }",
            "",
            "    if n != 1 {",
            "        factors = append(factors, PrimeFactor{n, 1})",
            "    }",
            "    return factors",
            "}",
            ""
        ]
    },
    "isPrime int": {
        "scope": "go",
        "prefix": "_isprime",
        "description": "nが素数であるかどうか",
        "body": [
            "func isPrime(n int) bool {",
            "    if n == 2 {",
            "        return true",
            "    } else if n < 3 {",
            "        return false",
            "    }",
            "    for i := int(3); i*i <= n; i++ {",
            "        if n % i == 0 {",
            "            return false",
            "        }",
            "    }",
            "    return true",
            "}",
            ""
        ]
    },
    "multi-bytes number": {
        "scope": "go",
        "prefix": "_multibyte",
        "description": "多倍長整数を扱います。",
        "body": [
            "// BigDecimalは多倍長整数を表現します。",
            "type BigDecimal big.Int",
            "",
            "// _BigConstは多倍長整数の定数を定義します。",
            "type _BigConst struct {",
            "    // ZEROは定数の0を返します。",
            "    ZERO func() *BigDecimal",
            "",
            "    // ONEは定数の1を返します。",
            "    ONE func() *BigDecimal",
            "",
            "    // TWOは定数の2を返します。",
            "    TWO func() *BigDecimal",
            "}",
            "",
            "// Bigは多倍長整数の定数を定義します。",
            "var Big = _BigConst{",
            "    ZERO: func() *BigDecimal { return NewBigDecimal(0) },",
            "    ONE:  func() *BigDecimal { return NewBigDecimal(1) },",
            "    TWO:  func() *BigDecimal { return NewBigDecimal(2) },",
            "}",
            "",
            "// ToBigIntはBigDecimalの値をmath/bigのIntに変換します。",
            "func ToBigInt(x *BigDecimal) *big.Int {",
            "    a := big.Int(*x)",
            "    return &a",
            "}",
            "",
            "// ToBigDecimalはmath/bigのIntで表現された値をBigDecimalに変換します。",
            "func ToBigDecimal(x *big.Int) *BigDecimal {",
            "    a := BigDecimal(*x)",
            "    return &a",
            "}",
            "",
            "func newBigInt(v int) *big.Int {",
            "    return big.NewInt(int64(v))",
            "}",
            "",
            "// NewBigDecimalはvを表現する多倍長整数を返します。",
            "func NewBigDecimal(v int) *BigDecimal {",
            "    return ToBigDecimal(newBigInt(v))",
            "}",
            "",
            "// Addはa+bの値を表現する多倍長整数を返します。",
            "func (a *BigDecimal) Add(b *BigDecimal) *BigDecimal {",
            "    ans := newBigInt(0)",
            "    ans.Add(ans, ToBigInt(a))",
            "    ans.Add(ans, ToBigInt(b))",
            "    return ToBigDecimal(ans)",
            "}",
            "",
            "// Subはa-bの値を表現する多倍長整数を返します。",
            "func (a *BigDecimal) Sub(b *BigDecimal) *BigDecimal {",
            "    ans := newBigInt(0)",
            "    ans.Add(ans, ToBigInt(a))",
            "    ans.Sub(ans, ToBigInt(b))",
            "    return ToBigDecimal(ans)",
            "}",
            "",
            "// Mulはa*bの値を表現する多倍長整数を返します。",
            "func (a *BigDecimal) Mul(b *BigDecimal) *BigDecimal {",
            "    ans := newBigInt(0)",
            "    ans.Add(ans, ToBigInt(a))",
            "    ans.Mul(ans, ToBigInt(b))",
            "    return ToBigDecimal(ans)",
            "}",
            "",
            "// Divはa/bの値を表現する多倍長整数を返します。",
            "func (a *BigDecimal) Div(b *BigDecimal) *BigDecimal {",
            "    ans := newBigInt(0)",
            "    ans.Add(ans, ToBigInt(a))",
            "    ans.Div(ans, ToBigInt(b))",
            "    return ToBigDecimal(ans)",
            "}",
            "",
            "// Modはa%bの値を表現する多倍長整数を返します。",
            "func (a *BigDecimal) Mod(b *BigDecimal) *BigDecimal {",
            "    ans := newBigInt(0)",
            "    ans.Add(ans, ToBigInt(a))",
            "    ans.Mod(ans, ToBigInt(b))",
            "",
            "    // 負にならないような調整",
            "    if ans.Cmp(newBigInt(0)) < 0 {",
            "        ans.Add(ans, ToBigInt(b))",
            "    }",
            "",
            "    return ToBigDecimal(ans)",
            "}",
            "",
            "// Powはa^b (mod m)の値を表現する多倍長整数を返します。",
            "func (v *BigDecimal) Pow(x, m *BigDecimal) *BigDecimal {",
            "    ans := newBigInt(0)",
            "    ans.Add(ans, ToBigInt(v))",
            "    ans.Exp(ans, ToBigInt(x), ToBigInt(m))",
            "    return ToBigDecimal(ans)",
            "}",
            "",
            "// LessThanはa<bであるかを判断します。",
            "func (a *BigDecimal) LessThan(b *BigDecimal) bool {",
            "    return ToBigInt(a).Cmp(ToBigInt(b)) < 0",
            "}",
            "",
            "// GreaterThanはa>bであるかを判断します。",
            "func (a *BigDecimal) GreaterThan(b *BigDecimal) bool {",
            "    return ToBigInt(a).Cmp(ToBigInt(b)) > 0",
            "}",
            "",
            "// LessThanOrEqualToはa<=bであるかを判断します。",
            "func (a *BigDecimal) LessThanOrEqualTo(b *BigDecimal) bool {",
            "    return !a.GreaterThan(b)",
            "}",
            "",
            "// GreaterThanOrEqualToはa>=bであるかを判断します。",
            "func (a *BigDecimal) GreaterThanOrEqualTo(b *BigDecimal) bool {",
            "    return !a.LessThan(b)",
            "}",
            "",
            "// EqualToはa==bであるかを判断します。",
            "func (a *BigDecimal) EqualTo(b *BigDecimal) bool {",
            "    return ToBigInt(a).Cmp(ToBigInt(b)) == 0",
            "}",
            "",
            "// Intはaの値をintにして返します。",
            "func (a *BigDecimal) Int() int {",
            "    return int(ToBigInt(a).Int64())",
            "}",
            "",
        ]
    }
}

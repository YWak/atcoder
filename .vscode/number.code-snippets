{
    "mod operations": {
        "scope": "go",
        "prefix": "modを使用した操作",
        "body": [
            "type mint int64",
            "",
            "var mod = mint(${1:1e9 + 7})",
            "",
            "// add は a + bを返します",
            "func (a mint) add(b mint) mint {",
            "    return (a + b) % mod",
            "}",
            "",
            "// sub は a - bを返します",
            "func (a mint) sub(b mint) mint {",
            "    return (a - b + mod) % mod",
            "}",
            "",
            "// mul は a * bを返します",
            "func (a mint) mul(b mint) mint {",
            "    return (a * (b % mod)) % mod",
            "}",
            "",
            "// div は a/bを返します",
            "func (a mint) div(b mint) mint {",
            "    return a.mul(b.inv())",
            "}",
            "",
            "// inv は aの逆元を返します",
            "func (a mint) inv() mint {",
            "    // 拡張ユークリッドの互除法",
            "    b := mod",
            "    u := mint(1)",
            "    v := mint(0)",
            "    for b > 0 {",
            "        t := a / b",
            "        a -= t * b",
            "        a, b = b, a",
            "        u -= t * v",
            "        u, v = v, u",
            "    }",
            "    return (u + mod) % mod",
            "}",
            "",
            "// pow は a ^ bを返します",
            "func (a mint) pow(b mint) mint {",
            "    ans := mint(1)",
            "",
            "    for b != 0 {",
            "        if b & 1 == 1 {",
            "            ans = ans.mul(a)",
            "        }",
            "        a = a.mul(a)",
            "        b = b >> 1",
            "    }",
            "    return ans",
            "}",
            ""
        ]
    },
    "combination": {
        "scope": "go",
        "prefix": "combination",
        "description": "組み合わせの実装",
        "body": [
            "var facts  []mint // facts[i] = i!",
            "var ifacts []mint // ifacts[i] = i!の逆元",
            "",
            "// nの階乗までを初期化します",
            "func initFact(n int) {",
            "    if len(facts) == 0 {",
            "        facts = []mint{mint(1)}",
            "        ifacts = []mint{mint(1)}",
            "    }",
            "    m := mint(n)",
            "    for i := mint(len(facts)); i <= m; i++ {",
            "        facts = append(facts, facts[i-1].mul(i))",
            "        ifacts = append(ifacts, ifacts[i-1].mul(i.pow(mod-2)))",
            "    }",
            "}",
            "",
            "// perm はnPkを返します",
            "func perm(n, k int) mint {",
            "    if n < k {",
            "        return 0",
            "    }",
            "    initFact(n)",
            "    return ifacts[n-k].mul(facts[n])",
            "}",
            "",
            "// comb はnCkを返します",
            "func comb(n, k int) mint {",
            "    if n == 0 && k == 0 {",
            "        return mint(1)",
            "    } else if n < k || n < 0 {",
            "        return mint(0)",
            "    }",
            "    initFact(n)",
            "    initFact(k)",
            "    return facts[n].mul(ifacts[n-k]).mul(ifacts[k])",
            "}",
            "",
            "// dupcomb はnHkを返します",
            "func dupcomb(n, k int) mint {",
            "    return comb(n+k-1, n-1)",
            "}",
            ""
        ]
    },
    // 64bit integer -------------------------------------------------
    "max 2 x int64": {
        "scope": "go",
        "prefix": "max64",
        "description": "max(int64, int64)の実装",
        "body": [
            "func max(a, b int64) int64 {",
            "    if a > b {",
            "        return a",
            "    }",
            "    return b",
            "}",
            ""
        ]
    },
    "max n x int64": {
        "scope": "go",
        "prefix": "max64n",
        "description": "max(...int64)の実装",
        "body": [
            "func max(a int64, b ...int64) int64 {",
            "    l := len(b)",
            "    for i := 0; i < l; i++ {",
            "        if a < b[i] {",
            "            a = b[i]",
            "        }",
            "    }",
            "",
            "    return a",
            "}",
            ""
        ]
    },
    "min 2 x int64": {
        "scope": "go",
        "prefix": "min64",
        "description": "min(int64, int64)の実装",
        "body": [
            "func min(a, b int64) int64 {",
            "    if a < b {",
            "        return a",
            "    }",
            "    return b",
            "}",
            ""
        ]
    },
    "min n x int64": {
        "scope": "go",
        "prefix": "min64n",
        "description": "min(...int64)の実装",
        "body": [
            "func min(a int64, b ...int64) int64 {",
            "    l := len(b)",
            "    for i := 0; i < l; i++ {",
            "        if a > b[i] {",
            "            a = b[i]",
            "        }",
            "    }",
            "",
            "    return a",
            "}",
            ""
        ]
    },
    "abs int64": {
        "scope": "go",
        "prefix": "abs64",
        "description": "abs(int64)の実装",
        "body": [
            "func abs(a int64) int64 {",
            "    if a > 0 {",
            "        return a",
            "    }",
            "    return -a",
            "}",
            ""
        ]
    },
    "pow int64": {
        "scope": "go",
        "prefix": "pow64",
        "description": "pow(int64, int)の実装",
        "body": "func pow(a int64, b int) int64 { return int64(math.Pow(float64(a), float64(b))) }\n"
    },
    "greatest common divider in int64": {
        "scope": "go",
        "prefix": "gcd64",
        "description": "最大公約数 gcd(int64, int64) の実装",
        "body": [
            "func gcd(a, b int64) int64 {",
            "    if b > a {",
            "        a, b = b, a",
            "    }",
            "    for b != 0 {",
            "        a, b = b, a%b",
            "    }",
            "    return a",
            "}",
            ""
        ]
    },
    "least common multiple in int64": {
        "scope": "go",
        "prefix": "lcm64",
        "description": "最小公倍数 lcm(int64, int64)の実装",
        "body": [
            "func lcm(a, b int64) int64 {",
            "    return a * b / gcd(a, b)",
            "}",
            ""
        ]
    },
    "dividers asc int64": {
        "scope": "go",
        "prefix": "dividers-asc",
        "description": "nの全約数(昇順) dividersOf(int64)の実装",
        "body": [
            "func dividersOf(n int64, direction int) []int64 {",
            "    div1 := make([]int64, 0)",
            "    div2 := make([]int64, 0)",
            "",
            "    for i := int64(1); i*i <= n; i++ {",
            "        if n % i == 0 {",
            "            div1 = append(div1, i)",
            "",
            "            if i != n/i {",
            "                div2 = append(div2, n/i)",
            "            }",
            "        }",
            "    }",
            "    for i := int64(0); i < l; i++ {",
            "        div1 = append(div1, div2[l-1-i])",
            "    }",
            "    return div1",
            "}",
            ""
        ]
    },
    "dividers desc int64": {
        "scope": "go",
        "prefix": "dividers-desc",
        "description": "nの全約数(降順) dividersOf(int64)の実装",
        "body": [
            "func dividersOf(n int64, direction int) []int64 {",
            "    div1 := make([]int64, 0)",
            "    div2 := make([]int64, 0)",
            "",
            "    for i := int64(1); i*i <= n; i++ {",
            "        if n % i == 0 {",
            "            div1 = append(div1, i)",
            "",
            "            if i != n/i {",
            "                div2 = append(div2, n/i)",
            "            }",
            "        }",
            "    }",
            "    for i := int64(0); i < l; i++ {",
            "        div2 = append(div2, div1[l-1-i])",
            "    }",
            "    return div2",
            "}",
            ""
        ]
    },
    "factorize int64": {
        "scope": "go",
        "prefix": "factorize",
        "description": "nの素因数分解",
        "body": [
            "// PrimeFactor は素因数と指数",
            "type PrimeFactor struct {",
            "    factor int64",
            "    exp    int",
            "}",
            "",
            "func factorize(n int64) []PrimeFactor {",
            "    factors := make([]PrimeFactor, 0)",
            "    if n%2 == 0 {",
            "        f := PrimeFactor{2, 0}",
            "        factors = append(factors, f)",
            "",
            "        for n%2 == 0 {",
            "            n /= 2",
            "            f.exp++",
            "        }",
            "    }",
            "    for i := int64(3); i*i <= n; i++ {",
            "        if n%i != 0 {",
            "            continue",
            "        }",
            "        f := PrimeFactor{i, 0}",
            "        factors = append(factors, f)",
            "",
            "        for n%i == 0 {",
            "            n /= i",
            "            f.exp++",
            "        }",
            "    }",
            "",
            "    if n != 1 {",
            "        factors = append(factors, PrimeFactor{n, 1})",
            "    }",
            "    return factors",
            "}",
            ""
        ]
    },
    "isPrime int64": {
        "scope": "go",
        "prefix": "isprime",
        "description": "nが素数であるかどうか",
        "body": [
            "func isPrime(n int64) bool {",
            "    if n == 2 {",
            "        return true",
            "    } else if n < 3 {",
            "        return false",
            "    }",
            "    for i := int64(3); i*i <= n; i++ {",
            "        if n % i == 0 {",
            "            return false",
            "        }",
            "    }",
            "    return true",
            "}",
            ""
        ]
    },
    // 32bit integer -------------------------------------------------
    "max 2 x int32": {
        "scope": "go",
        "prefix": "max32",
        "description": "max(int, int)の実装",
        "body": [
            "func max(a, b int) int {",
            "    if a > b {",
            "        return a",
            "    }",
            "    return b",
            "}",
            ""
        ]
    },
    "max n x int32": {
        "scope": "go",
        "prefix": "max32n",
        "description": "max(...int)の実装",
        "body": [
            "func max(a int, b ...int) int {",
            "    l := len(b)",
            "    for i := 0; i < l; i++ {",
            "        if a < b[i] {",
            "            a = b[i]",
            "        }",
            "    }",
            "",
            "    return a",
            "}",
            ""
        ]
    },
    "min 2 x int32": {
        "scope": "go",
        "prefix": "min32",
        "description": "min(int)の実装",
        "body": [
            "func min(a, b int) int {",
            "    if a < b {",
            "        return a",
            "    }",
            "    return b",
            "}",
            ""
        ]
    },
    "min n x int32": {
        "scope": "go",
        "prefix": "min32n",
        "description": "min(int)の実装",
        "body": [
            "func min(a int, b ...int) int {",
            "    l := len(b)",
            "    for i := 0; i < l; i++ {",
            "        if a > b[i] {",
            "            a = b[i]",
            "        }",
            "    }",
            "",
            "    return a",
            "}",
            ""
        ]
    },
    "abs int32": {
        "scope": "go",
        "prefix": "abs32",
        "description": "abs(int)の実装",
        "body": [
            "func abs(a int) int {",
            "    if a > 0 {",
            "        return a",
            "    }",
            "    return -a",
            "}",
            ""
        ]
    },
    "pow int32": {
        "scope": "go",
        "prefix": "pow",
        "description": "pow(int, int)の実装",
        "body": "func pow(a, b int) int { return int(math.Pow(float64(a), float64(b))) }\n"
    },
    // bit 操作 ---------------------------------------------
    "Nth bit64": {
        "scope": "go",
        "prefix": "nthbit64",
        "description": "n番目のビットの値を取得する実装",
        "body": "func nthbit(a int64, n int) int { return int((a >> uint(n)) & 1) }\n"
    },
    "Nth bit32": {
        "scope": "go",
        "prefix": "nthbit32",
        "description": "n番目のビットの値を取得する実装",
        "body": "func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }\n"
    },

}

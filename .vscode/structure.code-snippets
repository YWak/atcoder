{
    "Priority Queue": {
        "scope": "go",
        "description": "優先度付きキューの実装",
        "prefix": ["pq", "priorityqueue"],
        "body": [
            "type ${1:item} struct {",
            "    value ${2:int}",
            "    priority int",
            "    index int",
            "}",
            "",
            "type pqueue []*${1}",
            "",
            "// キューの長さ",
            "func (pq pqueue) Len() int { return len(pq) }",
            "",
            "// キューの大小比較",
            "// 基本は大きい方を優先する",
            "func (pq pqueue) Less(i, j int) bool { return pq[i].priority > pq[j].priority }",
            "",
            "// キューの内容交換",
            "func (pq pqueue) Swap(i, j int) {",
            "   pq[i], pq[j] = pq[j], pq[i]",
            "   pq[i].index = i",
            "   pq[j].index = j",
            "}",
            "",
            "// キューへの追加",
            "func (pq *pqueue) Push(x interface{}) {",
            "    n := len(*pq)",
            "    i := x.(*item)",
            "    i.index = n",
            "    *pq = append(*pq, x.(*item))",
            "}",
            "",
            "// キューからの取り出し",
            "func (pq *pqueue) Pop() interface{} {",
            "    old := *pq",
            "    n := len(old)",
            "    if n == 0 {",
            "        fmt.Println(\"queue is empty\")",
            "        return nil",
            "    } ",
            "    i := old[n-1]",
            "    i.index = -1",
            "    *pq = old[0:n-1]",
            "    return i",
            "}",
            ""
        ]
    },
    "Union-Find": {
        "scope": "go",
        "description": "Union-Find",
        "prefix": ["uf", "unionfind"],
        "body": [
            "// UnionFind : 森構造を保持する構造体",
            "type UnionFind struct {",
            "    par  []int // i番目のノードに対応する親",
            "    rank []int // i番目のノードの階層",
            "}",
            "",
            "// [0, n)のノードを持つUnion-Findを作る",
            "func ufNew(n int) UnionFind {",
            "    uf := UnionFind{par: make([]int, n), rank: make([]int, n)}",
            "",
            "    for i := 0; i < n; i++ {",
            "        uf.par[i] = i",
            "    }",
            "",
            "    return uf",
            "}",
            "",
            "// xのルートを得る",
            "func ufRoot(uf *UnionFind, x int) int {",
            "    p := x",
            "    for p != uf.par[p] {",
            "        p = uf.par[p]",
            "    }",
            "    uf.par[x] = p",
            "    return p",
            "}",
            "",
            "// xとyを併合する。集合の構造が変更された(== 呼び出し前は異なる集合だった)かどうかを返す",
            "func ufUnite(uf *UnionFind, x, y int) bool {",
            "    rx := ufRoot(uf, x)",
            "    ry := ufRoot(uf, y)",
            "",
            "    if rx == ry {",
            "        return false",
            "    }",
            "    if uf.rank[rx] < uf.rank[ry] {",
            "        rx, ry = ry, rx",
            "    }",
            "    if uf.rank[rx] == uf.rank[ry] {",
            "        uf.rank[rx]++",
            "    }",
            "    uf.par[ry] = rx",
            "    return true",
            "}",
            "",
            "// xとyが同じノードにいるかを判断する",
            "func ufSame(uf *UnionFind, x, y int) bool {",
            "    rx := ufRoot(uf, x)",
            "    ry := ufRoot(uf, y)",
            "    return rx == ry",
            "}",
            ""
        ]
    },
    "graph32": {
        "scope": "go",
        "description": "グラフ - int32",
        "prefix": "graph-list32",
        "body": [
            "type Edge struct {",
            "    left int",
            "    right int",
            "    weight int",
            "}",
            "func generate () Edge {",
            "    left := nextInt()",
            "    right := nextInt()",
            "    weight := 0",
            "    return Edge{ left, right, weight }",
            "}",
            "",
            "func newAdjacencyList(N int, generate func() Edge) [][]*Edge {",
            "    graph := make([][]*Edge, N)",
            "    for i := 0; i < N; i++ {",
            "        e := generate()",
            "        graph[e.left] = append(graph[e.left], &e)",
            "        graph[e.right] = append(graph[e.right], &e)",
            "    }",
            "    return graph",
            "}"
        ]
    },
    "graph64": {
        "scope": "go",
        "description": "グラフ - int32 - 根付き木",
        "prefix": "graph-rooted-tree32",
        "body": [
            "parents := make([]int, ${1:N})",
            "parents[${2:0}] = -1 // 根を設定",
            "parent := ${2}",
            "for i := 0; i < "
        ]
    },
    "graph - int64 - adjacency list": {
        "scope": "go",
        "description": "グラフ - int64 - 隣接リスト",
        "prefix": "graph-list64",
        "body": [
            "graph := make([][]int64, ${1:N})",
            "for i := 0; i < ${1}; i++ {",
            "    ${2:X} := nextInt64()",
            "    ${3:Y} := nextInt64()",
            "    graph[$2] = append(graph[$2], $3)",
            "    graph[$3] = append(graph[$3], $2)",
            "}",
        ]
    },
    "main": {
        "scope": "go",
        "description": "At Coder main テンプレート",
        "prefix": "main",
        "body": [
            "package main",
            "",
            "import (",
            "    \"bufio\"",
            "    \"fmt\"",
            "    \"os\"",
            "    \"strconv\"",
            ")",
            "",
            "func main() {",
            "    $1",
            "    fmt.Println()",
            "}",
            "",
            "var stdin = initStdin()",
            "",
            "func initStdin() *bufio.Scanner {",
        	"    bufsize := 1 * 1024 * 1024 // 1 MB",
    	    "    var stdin = bufio.NewScanner(os.Stdin)",
	        "    stdin.Buffer(make([]byte, bufsize), bufsize)",
	        "    stdin.Split(bufio.ScanWords)",
	        "    return stdin",
            "}",
            "",
            "func nextString() string {",
            "    stdin.Scan()",
	        "    return stdin.Text()",
            "}",
            "",
            "func nextBytes() []byte {",
	        "    stdin.Scan()",
    	    "    return stdin.Bytes()",
            "}",
            "",
            "func nextInt() int {",
            "    i, _ := strconv.Atoi(nextString())",
	        "    return i",
            "}",
            "",
            "func nextInt64() int64 {",
	        "    i, _ := strconv.ParseInt(nextString(), 10, 64)",
            "    return i",
            "}",
            ""
        ]
    }
}

{
    "Priority Queue": {
        "scope": "go",
        "description": "優先度付きキューの実装",
        "prefix": ["priorityqueue"],
        "body": [
            "PQItem は優先度付きキューに保存される要素",
            "type PQItem ${1:int}",
            "// PQList は 優先度付きキューの本体",
            "type PQList []PQItem",
            "// prior は pq[i]の方が優先度が高いかどうかを判断します。",
            "func (pq PQList) prior(i, j int) bool {",
            "    return pq[i] > pq[j] // 大きいもの優先とする",
            "}",
            "",
            "// PriorityQueue は優先度付きキューを表す",
            "type PriorityQueue struct {",
            "    queue *PQList",
            "}",
            "",
            "func pqNew() PriorityQueue {",
            "    l := make(PQList, 0, 100)",
            "    return PriorityQueue{queue: &l}",
            "}",
            "",
            "// Push は優先度付きキューに要素を一つ追加します。",
            "func (pq PriorityQueue) Push(value PQItem) {",
            "    heap.Push(pq.queue, value)",
            "}",
            "",
            "// Pop は優先度付きキューから要素を一つ取り出します。",
            "func (pq PriorityQueue) Pop() PQItem {",
            "    return heap.Pop(pq.queue).(PQItem)",
            "}",
            "",
            "// Empty は優先度付きキューが空かどうかを判断します。",
            "func (pq PriorityQueue) Empty() bool {",
        	"    return len(*pq.queue) == 0",
            "}",
            "",
            "// Swap は要素を交換します。",
            "func (pq PQList) Swap(i, j int) {",
            "    pq[i], pq[j] = pq[j], pq[i]",
            "}",
            "// Less は要素を比較し、pq[i] < pq[j]かどうかを判断します",
            "func (pq PQList) Less(i, j int) bool {",
            "    return pq.prior(i, j)",
            "}",
            "// Len は要素の数を返します。",
            "func (pq PQList) Len() int {",
            "    return len(pq)",
            "}",
            "// Pop は要素を取り出して返します。",
            "func (pq *PQList) Pop() interface{} {",
            "    old := *pq",
            "    n := len(old)",
            "    item := old[n-1]",
            "    *pq = old[:n-1]",
            "    return item",
            "}",
            "// Push は要素を追加します。",
            "func (pq *PQList) Push(item interface{}) {",
            "    *pq = append(*pq, item.(PQItem))",
            "}",
            "",
        ]
    },
    "Union-Find": {
        "scope": "go",
        "description": "Union-Find",
        "prefix": ["unionfind"],
        "body": [
            "// UnionFind : UnionFind構造を保持する構造体",
            "type UnionFind struct {",
            "    par  []int // i番目のノードに対応する親",
            "    rank []int // i番目のノードの階層",
            "}",
            "",
            "// [0, n)のノードを持つUnion-Findを作る",
            "func ufNew(n int) UnionFind {",
            "    uf := UnionFind{par: make([]int, n), rank: make([]int, n)}",
            "",
            "    for i := 0; i < n; i++ {",
            "        uf.par[i] = i",
            "    }",
            "",
            "    return uf",
            "}",
            "",
            "// Root はxのルートを得る",
            "func (uf *UnionFind) Root(x int) int {",
            "    p := x",
            "    for p != uf.par[p] {",
            "        p = uf.par[p]",
            "    }",
            "    uf.par[x] = p",
            "    return p",
            "}",
            "",
            "// Unite はxとyを併合する。集合の構造が変更された(== 呼び出し前は異なる集合だった)かどうかを返す",
            "func (uf *UnionFind) Unite(x, y int) bool {",
            "    rx := uf.Root(x)",
            "    ry := uf.Root(y)",
            "",
            "    if rx == ry {",
            "        return false",
            "    }",
            "    if uf.rank[rx] < uf.rank[ry] {",
            "        rx, ry = ry, rx",
            "    }",
            "    if uf.rank[rx] == uf.rank[ry] {",
            "        uf.rank[rx]++",
            "    }",
            "    uf.par[ry] = rx",
            "    return true",
            "}",
            "",
            "// Same はxとyが同じノードにいるかを判断する",
            "func (uf *UnionFind) Same(x, y int) bool {",
            "    rx := uf.Root(x)",
            "    ry := uf.Root(y)",
            "    return rx == ry",
            "}",
            ""
        ]
    },
    "point": {
        "scope": "go",
        "description": "点を表す構造体",
        "prefix": "point",
        "body": [
            "type point struct {",
            "    x int",
            "    y int",
            "}",
        ]
    },
    "main": {
        "scope": "go",
        "description": "At Coder main テンプレート",
        "prefix": "main",
        "body": [
            "package main",
            "",
            "import (",
            "    \"bufio\"",
            "    \"fmt\"",
            "    \"os\"",
            "    \"strconv\"",
            ")",
            "",
            "func main() {",
            "    $1",
            "    fmt.Println()",
            "}",
            "",
            "var stdin = initStdin()",
            "",
            "func initStdin() *bufio.Scanner {",
        	"    bufsize := 1 * 1024 * 1024 // 1 MB",
    	    "    var stdin = bufio.NewScanner(os.Stdin)",
	        "    stdin.Buffer(make([]byte, bufsize), bufsize)",
	        "    stdin.Split(bufio.ScanWords)",
	        "    return stdin",
            "}",
            "",
            "func nextString() string {",
            "    stdin.Scan()",
	        "    return stdin.Text()",
            "}",
            "",
            "func nextBytes() []byte {",
	        "    stdin.Scan()",
    	    "    return stdin.Bytes()",
            "}",
            "",
            "func nextInt() int {",
            "    i, _ := strconv.Atoi(nextString())",
	        "    return i",
            "}",
            "",
            "func nextInts(n int) []int {",
	        "    a := make([]int, n)",
            "    for i := 0; i < n; i++ {",
            "        a[i] = nextInt()",
            "    }",
            "    return a",
            "}",
            "",
            "func debug(args ...interface{}) {",
            "    fmt.Fprintln(os.Stderr, args...)",
            "}"
        ]
    }
}

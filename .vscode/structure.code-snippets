{
    "Priority Queue": {
        "scope": "go",
        "description": "優先度付きキューの実装",
        "prefix": ["pq", "priorityqueue"],
        "body": [
            "type ${1:Item} struct {",
            "    value ${2:string}",
            "    priority int",
            "    index int",
            "}",
            "",
            "type PriorityQueue []*${1}",
            "",
            "// キューの長さ",
            "func (pq PriorityQueue) Len() int { return len(pq) }",
            "",
            "// キューの大小比較",
            "// 基本は大きい方を優先する",
            "func (pq PriorityQueue) Less(i, j int) bool { return pq[i].priority > pq[j].priority }",
            "",
            "// キューの内容交換",
            "func (pq PriorityQueue) Swap(i, j int) {",
            "   pq[i], pq[j] = pq[j], pq[i]",
            "   pq[i].index = i",
            "   pq[j].index = j",
            "}",
            "",
            "// キューへの追加",
            "func (pq *PriorityQueue) Push(x interface{}) {",
            "    n := len(*pq)",
            "    item := x.(*Item)",
            "    item.index = n",
            "    *pq = append(*pq, x)",
            "}",
            "",
            "// キューからの取り出し",
            "func (pq *PriorityQueue) Pop(x interface{}) $1 {",
            "    old := *pq",
            "    n := len(old)",
            "    item := old[n-1]",
            "    item.index = -1",
            "    *pq = old[0:n-1]",
            "    return item",
            "}",
            ""
        ]
    },
    "graph32": {
        "scope": "go",
        "description": "グラフ - int32",
        "prefix": "graph-list32",
        "body": [
            "type Edge struct {",
            "    left int",
            "    right int",
            "    weight int",
            "}",
            "func generate () Edge {",
            "    left := nextInt()",
            "    right := nextInt()",
            "    weight := 0",
            "    return Edge{ left, right, weight }",
            "}",
            "",
            "func newAdjacencyList(N int, generate func() Edge) [][]*Edge {",
            "    graph := make([][]*Edge, N)",
            "    for i := 0; i < N; i++ {",
            "        e := generate()",
            "        graph[e.left] = append(graph[e.left], &e)",
            "        graph[e.right] = append(graph[e.right], &e)",
            "    }",
            "    return graph",
            "}"
        ]
    },
    "graph64": {
        "scope": "go",
        "description": "グラフ - int32 - 根付き木",
        "prefix": "graph-rooted-tree32",
        "body": [
            "parents := make([]int, ${1:N})",
            "parents[${2:0}] = -1 // 根を設定",
            "parent := ${2}",
            "for i := 0; i < "
        ]
    },
    "graph - int64 - adjacency list": {
        "scope": "go",
        "description": "グラフ - int64 - 隣接リスト",
        "prefix": "graph-list64",
        "body": [
            "graph := make([][]int64, ${1:N})",
            "for i := 0; i < ${1}; i++ {",
            "    ${2:X} := nextInt64()",
            "    ${3:Y} := nextInt64()",
            "    graph[$2] = append(graph[$2], $3)",
            "    graph[$3] = append(graph[$3], $2)",
            "}",
        ]
    },
    "main": {
        "scope": "go",
        "description": "At Coder main テンプレート",
        "prefix": "main",
        "body": [
            "package main",
            "",
            "import (",
            "    \"bufio\"",
            "    \"fmt\"",
            "    \"os\"",
            "    \"strconv\"",
            ")",
            "",
            "func main() {",
            "    fmt.Println()",
            "}",
            "",
            "var stdin = initStdin()",
            "",
            "func initStdin() *bufio.Scanner {",
        	"    bufsize := 1 * 1024 * 1024 // 1 MB",
    	    "    var stdin = bufio.NewScanner(os.Stdin)",
	        "    stdin.Buffer(make([]byte, bufsize), bufsize)",
	        "    stdin.Split(bufio.ScanWords)",
	        "    return stdin",
            "}",
            "",
            "func nextString() string {",
            "    stdin.Scan()",
	        "    return stdin.Text()",
            "}",
            "",
            "func nextBytes() []byte {",
	        "    stdin.Scan()",
    	    "    return stdin.Bytes()",
            "}",
            "",
            "func nextInt() int {",
            "    i, _ := strconv.Atoi(nextString())",
	        "    return i",
            "}",
            "",
            "func nextInt64() int64 {",
	        "    i, _ := strconv.ParseInt(nextString(), 10, 64)",
            "    return i",
            "}",
            ""
        ]
    }
}

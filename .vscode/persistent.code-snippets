{
    "persistent stack": {
        "scope": "go",
        "prefix": "_persistent-stack",
        "description": "データ永続スタック",
        "body": [
            "type PersistentStackNode struct {",
            "  value interface{}",
            "  prev  *PersistentStackNode",
            "}",
            "",
            "// PersistentStackはデータ永続スタックの実装です。",
            "// ある時点でのスタックの状態を表現しています。",
            "type PersistentStack struct {",
            "  top *PersistentStackNode",
            "}",
            "",
            "// Popは値をひとつ取り出した状態のスタックを返します。",
            "func (stack *PersistentStack) Pop() *PersistentStack {",
            "  if stack.top == nil {",
            "    return stack",
            "  }",
            "  return &PersistentStack{stack.top.prev}",
            "}",
            "",
            "// Pushはvalueをスタックに追加したあとのスタックを返します。",
            "func (stack *PersistentStack) Push(value interface{}) *PersistentStack {",
            "  next := &PersistentStackNode{value, stack.top}",
            "  return &PersistentStack{next}",
            "}",
            "",
            "// IsEmptyは現在のスタックが空かどうかを返します。",
            "func (stack *PersistentStack) IsEmpty() bool {",
            "  return stack.top == nil",
            "}",
            "",
            "// Peekは現在のスタックの一番上の値を返します。",
            "// スタックが空の場合はエラーになります。",
            "func (stack *PersistentStack) Peek() interface{} {",
            "  return stack.top.value",
            "}",
            "",
            "// PeekOrDefaultは現在のスタックの一番上の値を返します。",
            "// スタックが空の場合はdefaultValueを返します。",
            "func (stack *PersistentStack) PeekOrDefault(defaultValue interface{}) interface{} {",
            "  if stack.IsEmpty() {",
            "    return defaultValue",
            "  }",
            "  return stack.top.value",
            "}",
            "",
            "// NewPersistentStackは空のデータ永続スタックを返します。",
            "func NewPersistentStack() *PersistentStack {",
            "  return &PersistentStack{}",
            "}",
            "",
            ""
        ]
    }
}

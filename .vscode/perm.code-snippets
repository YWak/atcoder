{
    "Permutation": {
        "scope": "go",
        "description": "指定した数までの順列",
        "prefix": ["perm"],
        "body": [
            "// 1からnまでの順列を作成して返します",
            "func perm(n int) [][]int {",
            "    return perm1(n, 0, (1<<uint(n))-1, []int{})",
            "}",
            "// usedのiビット目が0の場合iがarrに含まれていない",
            "func perm1(n, used, end int, arr []int) [][]int {",
            "    if used == end {",
            "        return [][]int{arr}",
            "    }",
            "    ret := make([][]int, 0)",
            "    for i := 1; i <= n; i++ {",
            "        k := 1 << uint(i-1)",
            "        if used & k == 0 {",
            "            l := append([]int{}, arr...)",
            "            l = append(l, i)",
            "            ret = append(ret, perm1(n, used | k, end, l)...)",
            "        }",
            "    }",
            "    return ret",
            "}"
        ]
    },
    "Increasing Sequence": {
        "scope": "go",
        "description": "指定した数までの順列",
        "prefix": ["increasing"],
        "body": [
            "// 1からnまでのm項からなる単調増加列",
            "func increasing(n, m int) [][]int {",
            "    return increasing1(1, 0, n, m, []int{1})",
            "}",
            "// ",
            "func increasing1(n, m, N, M int, arr []int) [][]int {",
            "    if m == M {",
            "        ret := []int{}",
            "        s := 0",
            "        for i := 0; i < len(arr); i++ {",
            "            if arr[i] == 1 {",
            "                s++",
            "            } else {",
            "                ret = append(ret, s)",
            "            }",
            "        }",
            "        return [][]int{ret}",
            "    }",
            "    ret := [][]int{}",
            "    if n < N {",
            "        arr1 := append([]int{}, arr...)",
            "        arr1 = append(arr1, 1)",
            "        ret = append(ret, increasing1(n+1, m, N, M, arr1)...)",
            "    }",
            "    if m < M {",
            "        arr0 := append([]int{}, arr...)",
            "        arr0 = append(arr0, 0)",
            "        ret = append(ret, increasing1(n, m+1, N, M, arr0)...)",
            "    }",
            "    return ret",
            "}"
        ]
    }
}

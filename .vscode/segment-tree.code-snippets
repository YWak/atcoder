{
    "segment tree / range add point query": {
        "scope": "go",
        "description": "セグメント木。区間更新、一点取得を効率よくおこなうデータ構造。",
        "prefix": ["_segmenttree"],
        "body": [
            "type SegmentTreeFunctions struct {",
            "    // 単位元を返します",
            "    e func() int",
            "    // 計算結果を返します",
            "    calc func(a, b int) int",
            "}",
            "",
            "type SegmentTree struct {",
            "    // このsegment treeが管理するインデックスの範囲。[0, n)を管理する。",
            "    n int",
            "",
            "    // segment treeの各ノードの値を保持する配列",
            "    nodes []int",
            "",
            "    // このsegment treeの値を操作する関数群",
            "    f SegmentTreeFunctions",
            "}",
            "",
            "// NewSegmentTreeは区間和を扱うSegmentTreeを返します。",
            "// tested:",
            "//   https://atcoder.jp/contests/abl/tasks/abl_d",
            "func NewSegmentTree() *SegmentTree {",
            "    return &SegmentTree{",
            "        -1,",
            "        []int{},",
            "        SegmentTreeFunctions{",
            "            func() int { return 0 },",
            "            func(a, b int) int { return a + b },",
            "        },",
            "    }",
            "}",
            "",
            "// initは[0, n)のsegment treeを初期化します。",
            "// 各要素の値は単位元となります。",
            "// tested:",
            "//   https://atcoder.jp/contests/abl/tasks/abl_d",
            "func (st *SegmentTree) init(n int) {",
            "    // xはn*2を超える最小の2べき",
            "    x := 1",
            "    for x/2 < n+1 {",
            "        x *= 2",
            "    }",
            "    st.n = x / 2",
            "    st.nodes = make([]int, x)",
            "    for i := 0; i < x; i++ {",
            "        st.nodes[i] = st.f.e()",
            "    }",
            "}",
            "",
            "// initAsArrayはvalsで配列を初期化します。",
            "// 区間の長さはlen(vals)になります。",
            "func (st *SegmentTree) initAsArray(vals []int) {",
            "    n := len(vals)",
            "    // xはn*2を超える最小の2べき",
            "    x := 1",
            "    for x/2 < n {",
            "        x *= 2",
            "    }",
            "    st.n = x / 2",
            "    st.nodes = make([]int, x)",
            "",
            "    for i, v := range vals {",
            "        st.nodes[i+st.n] = v",
            "    }",
            "}",
            "",
            "// queryはi(0-based)番目の値を取得します。",
            "// tested:",
            "//   https://atcoder.jp/contests/abc253/tasks/abc253_f",
            "func (st *SegmentTree) query(i int) int {",
            "    t := i + st.n",
            "    ret := st.nodes[t]",
            "",
            "    for {",
            "        t /= 2",
            "        if t == 0 {",
            "            break",
            "        }",
            "        ret = st.f.calc(ret, st.nodes[t])",
            "    }",
            "}",
            "",
            "// updateは[l, r) (0-based)の区間にvalueを適用します。",
            "// tested:",
            "//   https://atcoder.jp/contests/abc253/tasks/abc253_f",
            "func (st *SegmentTree) update(l, r, value int) {",
            "    for ll, rr := l+st.n, r+st.n; ll < rr; ll, rr = ll/2, rr/2 {",
            "        if ll%2 == 1 {",
            "            st.nodes[ll] = st.f.calc(st.nodes[ll], value)",
            "            ll++",
            "        }",
            "        if rr%2 == 1 {",
            "            rr--",
            "            st.nodes[rr] = st.f.calc(st.nodes[rr], value)",
            "        }",
            "    }",
            "}",
            ""
        ]
    }
}

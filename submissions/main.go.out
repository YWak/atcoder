//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	"github.com/ywak/atcoder/lib/ds"
	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

const mod = math.Mod998244353

func calc(in *io.In, out *io.Out) {
	K := in.NextInt()
	C := in.NextInts(26)

	// dp[i][j]はアルファベットのi文字目まで使って、j文字作る場合の数
	dp := ds.NewInt2d(27, K+1, 0)
	dp[0][0] = 1

	fact := make([]int, 1001)
	ifact := make([]int, 1001)
	fact[0] = 1
	for i := 1; i < len(fact); i++ {
		fact[i] = mod.Mul(fact[i-1], i)
	}
	ifact[len(fact)-1] = mod.Inv(fact[len(fact)-1])
	for i := len(fact) - 1; i > 0; i-- {
		ifact[i-1] = mod.Mul(ifact[i], i)
	}

	p := 0
	for i, c := range C {
		for j := 0; j <= K; j++ { // これまでにj個使っている
			// ここの文字を使わないケースは全部ある
			mod.Chadd(&dp[i+1][j], dp[i][j])
			for k := 1; j+k <= K && k <= c; k++ { // ここで文字をk個使う
				// (j+k)個の文字をシャッフルする方法
				t := fact[j+k]
				t = mod.Mul(t, ifact[j]) // j文字について並び順が決まっている
				t = mod.Mul(t, ifact[k]) // k文字について全部同じなので並び順が決まっているとみなしていい
				t = mod.Mul(t, dp[i][j]) // j文字分の順序がdp[i][j]パターンある
				// if K < 10 {
				// 	debug(i, j, k, t)
				// }
				// if k == 0 && t != dp[i][j] {
				// 	panic(fmt.Sprintf("(%d, %d, %d) %d != %d", i, j, k, t, dp[i][j]))
				// }

				mod.Chadd(&dp[i+1][j+k], t)
				p++
			}
		}
	}

	// debug(p)
	// if K < 10 {
	// 	for i := range dp {
	// 		debug(dp[i])
	// 	}
	// }
	ans := 0
	for j := 1; j <= K; j++ {
		mod.Chadd(&ans, dp[26][j])
	}

	out.Println(ans)
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true, // インタラクティブならfalseにすること。
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) bool {
	return math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) bool {
	return math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

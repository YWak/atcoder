//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

func calc(in *io.In, out *io.Out) {
	s := in.NextBytes()
	str := make([]byte, 0, len(s)*4-1)
	for i := 0; i < len(s)*2; i++ {
		if i > 0 {
			str = append(str, '-')
		}
		if i < len(s) {
			str = append(str, s[i])
		} else {
			str = append(str, '*')
		}
	}

	// manacher
	r := make([]int, len(str))
	match := func(a, b byte) bool {
		if a == '*' || b == '*' {
			return true
		}
		return a == b
	}

	for i, j := 0, 0; i < len(str); {
		for i-j >= 0 && i+j < len(str) && match(str[i-j], str[i+j]) {
			j++
		}
		r[i] = j
		k := 1
		for ; i-k >= 0 && k+r[i-k] < j; k++ {
			r[i+k] = r[i-k]
		}
		i += k
		j -= k
	}

	var ans []byte
	for i := 0; i < len(s)*2; i++ {
		j := i / 2
		// debug(i, j, len(s)-j, r[i])

		// iが偶数のときは奇数長の回分、iが奇数のときは偶数長の回文
		// ここでできる回文はj文字*2 (-1)の長さなので、残っている文字がなければ採用できる
		// 回分を構成するときに使用されるsに含まれる文字の数は、
		c := r[i]/2 + 1
		if !(r[i] == i+1 && c >= len(s)-j) {
			continue
		}

		if i%2 == 0 {
			// 奇数長、s[j]で折り返す。
			ans = make([]byte, (j+1)*2-1)
			// debug(j, len(ans))
			for t := 0; true; t++ {
				if j-t < 0 {
					break
				}
				ans[j-t] = s[j-t]
				ans[j+t] = s[j-t]
			}
		} else {
			// ここで回文を作る
			// 偶数長
			ans = make([]byte, (j+1)*2)
			for t := 0; true; t++ {
				if j-t < 0 {
					break
				}
				ans[j-t] = s[j-t]
				ans[j+1+t] = s[j-t]
			}
		}
		break
	}
	out.Println(string(ans))
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true, // インタラクティブならfalseにすること。
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) bool {
	return math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) bool {
	return math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// sqrtはx^2 <= aとなる最大のaを返します。
func sqrt(a int) int {
	return math.Sqrt(a)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

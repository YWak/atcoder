//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	"github.com/ywak/atcoder/lib/ds"
	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

func calc(in *io.In, out *io.Out) {
	n := in.NextInt()
	c := in.NextInts(n)
	x := []int{0}

	for _, t := range in.NextInts(n) {
		x = append(x, t)
	}

	// s,tが同色として、区間 [s, t]をはじめに塗ることにしたとき,
	// [s+1,t-1]に塗るコストが最小になるような塗り方が得られれば、最小コストがわかる

	memo := ds.NewInt2d(n*2+1, n*2+1, -1)
	norm := func(t int) int { return t % n }
	for i := range memo {
		for j := range memo {
			if i == j {
				memo[i][j] = 1 + x[c[norm(i)]]
			}
		}
	}

	// 区間 [s, t]を塗るのに必要な最小コスト
	var dfs func(s, t int) int
	dfs = func(s, t int) int {
		if memo[s][t] == -1 {
			// sを塗り、その先を塗る
			ans := INF18
			if s+1 <= t {
				chmin(&ans, 1+x[norm(s)]+dfs(s+1, t))
			}

			// sの色と同じ色になるところまで進め、それ以降の塗り方を決める
			sum := 0   // 同じ色が見つかったとき、その間の区間の最小コストを合計したもの
			prev := -1 // 直前に見つけた同じ色の位置
			for i := s; i <= t; i++ {
				if c[norm(s)] == c[norm(i)] {
					if prev != -1 {
						sum += dfs(prev+1, i-1)
					}
					b := i - s + 1
					x := b + x[c[norm(s)]] // ここまでの区間を塗った分
					x += sum               // ここまでの区間の異色分を塗った分
					x += dfs(i+1, t)       // ここからの区間を塗った分
					chmin(&ans, x)
					prev = i
				}
			}

			memo[s][t] = ans
		}

		return memo[s][t]
	}

	ans := INF18
	for i := 0; i <= n; i++ {
		chmin(&ans, dfs(i, i+n-1))
	}

	k := -1
	for _, l := range memo {
		for i, v := range l {
			if v == INF18 {
				l[i] = -2
			}

			chmax(&k, len(fmt.Sprint(l[i])))
		}
	}
	for _, l := range memo {
		ss := make([]string, len(l))
		for i, v := range l {
			f := fmt.Sprintf("%%%dd", k)
			ss[i] = fmt.Sprintf(f, v)
		}
		debug(ss)
	}
	out.Println(ans)
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true, // インタラクティブならfalseにすること。
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) bool {
	return math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) bool {
	return math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// sqrtはx^2 <= aとなる最大のaを返します。
func sqrt(a int) int {
	return math.Sqrt(a)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

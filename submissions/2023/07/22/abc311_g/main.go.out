//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	"github.com/ywak/atcoder/lib/ds"
	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

func calc(in *io.In, out *io.Out) {
	n, m := in.NextInt2()
	a := make([][]int, n)
	s := ds.NewInt2d(n+1, m+1, 0)

	for i := 0; i < n; i++ {
		a[i] = in.NextInts(m)
		for j, v := range a[i] {
			s[i+1][j+1] = s[i+1][j] + s[i][j+1] - s[i][j] + v
		}
	}
	sum := func(lx, rx, ly, ry int) int {
		return s[rx][ry] - s[rx][ly] - s[lx][ry] + s[lx][ly]
	}
	is := make([]int, m)
	for i := 0; i < m; i++ {
		is[i] = i
	}

	mins := make([]*ds.SegmentTree, m)
	for j := 0; j < m; j++ {
		arr := []int{}
		for i := 0; i < n; i++ {
			arr = append(arr, a[i][j])
		}
		mins[j] = ds.NewRangeMinQuery()
		mins[j].InitAsArray(arr)
	}

	ans := 0
	for lx := 0; lx < n; lx++ {
		for rx := lx + 1; rx <= n; rx++ {
			ms := make([]int, m)
			for j := 0; j < m; j++ {
				ms[j] = mins[j].Query(lx, rx)
			}
			mq := ds.NewRangeMinQuery()
			mq.F.E = func() int { return INF18 }
			mq.F.Calc = func(a, b int) int {
				if a == INF18 {
					return b
				}
				if b == INF18 {
					return a
				}
				if ms[a] < ms[b] {
					return a
				}
				return b
			}
			mq.InitAsArray(is)

			// とりあえず全体から処理していく。
			var dfs func(ly, ry int) int
			dfs = func(ly, ry int) int {
				if ly >= ry {
					return 0
				}

				mid := mq.Query(ly, ry)
				ans := sum(lx, rx, ly, ry) * ms[mid]
				chmax(&ans, dfs(ly, mid))
				chmax(&ans, dfs(mid+1, ry))

				return ans
			}

			chmax(&ans, dfs(0, m))
		}
	}

	out.Println(ans)
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true,
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

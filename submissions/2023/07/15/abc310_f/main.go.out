//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	"math/bits"
	"os"
	"strings"

	"github.com/ywak/atcoder/lib/ds"
	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

const mod = math.Mod998244353
const m = 10
const size = 1 << m
const mask = size - 1

func calc(in *io.In, out *io.Out) {
	n := in.NextInt()
	as := in.NextInts(n)
	dp := ds.NewInt2d(n+1, size, 0)
	dp[0][0] = 1

	// dp[i][j]はi番目まで使用してj(kビット目が1 => 和がk+1になる組合せが存在する)
	for i, a := range as {
		inva := mod.Inv(a)

		for j, p := range dp[i] {
			// 目が(t+1)だったときの値
			for t := 0; t < math.Min(a, m); t++ {
				// tを使わない | jの各状態に加えてtを使う | tだけ使う
				k := j | j<<(t+1) | 1<<t
				q := mod.Mul(p, mod.Mul(1, inva))
				mod.Chadd(&dp[i+1][k&mask], q)
			}

			// 11以上が出る確率を考える
			q := mod.Mul(p, mod.Mul(math.Max(0, a-m), inva))
			mod.Chadd(&dp[i+1][j], q)
		}
	}
	ans := 0
	for j := 0; j < size; j++ {
		if nthbit(j, m-1) == 1 {
			mod.Chadd(&ans, dp[n][j])
		}
	}
	out.Println(ans)
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true,
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// chmax は aとbのうち大きい方をaに設定します。
func chmax(as *int, b int) {
	math.Chmax(as, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(as *int, b int) {
	math.Chmin(as, b)
}

// abs は aの絶対値を返します。
func abs(as int) int {
	return math.Abs(as)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(as int, n int) int { return int((as >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(as int) int {
	return bits.OnesCount(uint(as))
}

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(a byte) bool {
	return 'a' <= a && a <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(a byte) bool {
	return 'A' <= a && a <= 'Z'
}

//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

func calc(in *io.In, out *io.Out) {
	n := in.NextInt()

	// 読み込んで座圧する
	as := in.NextInts(n)
	bs := in.NextInts(n)
	m := map[int]int{-1: 0}

	for i := 0; i < n; i++ {
		m[as[i]]++
		m[bs[i]]++
	}

	// aの値でバケットソートする
	bucket := make([][]int, len(m))
	math.Compress(m)
	for i := 0; i < n; i++ {
		a, b := m[as[i]], m[bs[i]]

		bucket[a] = append(bucket[a], b)
	}

	ans := 0
	l := len(m) + 1
	bit := make(BinaryIndexedTree, l+2)
	for _, ls := range bucket {
		// aの小さい方から高橋くんに渡すプレゼントを決めたとき、これまでに見たどのプレゼントを青木くんに渡しても高橋くんは嫉妬しない
		for _, b := range ls {
			bit.Add(b, 1)
		}

		// これまでに見たプレゼントのうち、高橋くんに渡したプレゼント以上の嬉しさをもつプレゼントなら青木くんも嫉妬しない
		for _, b := range ls {
			ans += bit.Sum(l) - bit.Sum(b-1)
		}
	}

	out.Println(ans)
}

// BinaryIndexedTree は 1点加算とa1 + a2 + ... + aiを求める
// 1要素分余分に確保すること
type BinaryIndexedTree []int

// Add はarray[index]にxを加算します
func (bit BinaryIndexedTree) Add(index, x int) {
	for i := index + 1; i < len(bit); i += (i & -i) {
		bit[i] += x
	}
}

// Sum は array[0]からarray[index]までの総和を取得します。
func (bit BinaryIndexedTree) Sum(index int) int {
	s := 0
	for i := index + 1; i > 0; i -= (i & -i) {
		s += bit[i]
	}
	return s
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true,
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

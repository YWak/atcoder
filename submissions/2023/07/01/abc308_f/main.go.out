//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"sort"
	"strings"

	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

type vou struct{ key, l, d, i int }

func calc(in *io.In, out *io.Out) {
	n, m := in.NextInt2()
	p := in.NextInts(n)
	l := in.NextInts(m)
	d := in.NextInts(m)

	vous := []*vou{}
	for i := 0; i < m; i++ {
		vous = append(vous, &vou{l[i] * N10_6, l[i], d[i], i})
	}
	sort.Slice(vous, func(i, j int) bool { return vous[i].key < vous[j].key })
	for i := 0; i < m; i++ {
		vous[i].key += i + 1
	}

	const geta = 500000
	c := map[int]int{}
	for i := 0; i < n; i++ {
		c[p[i]*N10_6+geta] = 1
	}
	for i := 0; i < m; i++ {
		c[vous[i].key] = 1
	}
	keys := []int{}
	for v := range c {
		keys = append(keys, v)
	}
	sort.Ints(keys)
	for i, v := range keys {
		c[v] = i
	}

	// 同じだったらlが大きい方を使う
	init := make([]*vou, len(keys))
	for i := 0; i < m; i++ {
		// debug("voucher", *vous[i], "is", c[vous[i].key])
		init[c[vous[i].key]] = vous[i]
	}

	st := NewRangeMaxQuery()
	st.initAsArray(init)

	sort.Slice(p, func(i, j int) bool { return p[i] < p[j] })
	ans := 0
	// r := len(init)
	for _, cost := range p {
		// vで使えるクーポンのうち、最大のクーポンを取得する
		ci := c[cost*N10_6+geta]
		// debug(cost, "query(", 0, ci, ")")
		v := st.query(0, ci)
		if v != nil {
			// debug("use voucher", *v, "to", cost)
			cost -= v.d
			st.update(c[v.key], nil)
		} else {
			// debug("do not use voucher to", cost)
		}
		ans += cost
	}

	out.Println(ans)
}

type SegmentTreeFunctions struct {
	// 単位元を返します
	e func() *vou
	// 計算結果を返します
	calc func(a, b *vou) *vou
}

type SegmentTree struct {
	// このsegment treeが管理するインデックスの範囲。[0, n)を管理する。
	n int

	// segment treeの各ノードの値を保持する配列
	nodes []*vou

	// このsegment treeの値を操作する関数群
	f SegmentTreeFunctions
}

// NewRangeMaxQueryは区間最大値を扱うSegmentTreeを返します。
func NewRangeMaxQuery() *SegmentTree {
	return &SegmentTree{
		-1,
		[]*vou{},
		SegmentTreeFunctions{
			func() *vou { return nil },
			func(a, b *vou) *vou {
				if a == nil {
					return b
				}
				if b == nil {
					return a
				}
				if a.d > b.d {
					return a
				}
				return b
			},
		},
	}
}

// initAsArrayはvalsで配列を初期化します。
// 区間の長さはlen(vals)になります。
// tested:
//
//	https://judge.yosupo.jp/problem/staticrmq
func (st *SegmentTree) initAsArray(vals []*vou) {
	n := len(vals)
	// xはn*2を超える最小の2べき
	x := 1
	for x/2 < n {
		x *= 2
	}
	st.n = x / 2
	st.nodes = make([]*vou, x)

	for i, v := range vals {
		st.nodes[i+st.n] = v
	}
	for i := st.n - 1; i > 0; i-- {
		st.nodes[i] = st.f.calc(st.nodes[i*2], st.nodes[i*2+1])
	}
}

// updateはi(0-based)番目の値をvalueに更新します。
// tested:
//
//	https://atcoder.jp/contests/abl/tasks/abl_d
func (st *SegmentTree) update(i int, value *vou) {
	t := i + st.n
	st.nodes[t] = value

	for {
		t /= 2
		if t == 0 {
			break
		}
		st.nodes[t] = st.f.calc(st.nodes[t*2], st.nodes[t*2+1])
	}
}

// queryは[l, r) (0-based)の計算値を返します。
// tested:
//
//	https://atcoder.jp/contests/abl/tasks/abl_d
func (st *SegmentTree) query(l, r int) *vou {
	ret := st.f.e()
	for ll, rr := l+st.n, r+st.n; ll < rr; ll, rr = ll/2, rr/2 {
		if ll%2 == 1 {
			ret = st.f.calc(ret, st.nodes[ll])
			ll++
		}
		if rr%2 == 1 {
			rr--
			ret = st.f.calc(st.nodes[rr], ret)
		}
	}

	return ret
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true,
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

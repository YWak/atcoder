//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

var in *io.In
var out *io.Out

type pair struct{ a, b int }

func getdist(a [][]byte, s *pair) (dist [][]int) {
	h, w := len(a), len(a[0])
	dist = make([][]int, len(a))
	for i := range a {
		dist[i] = make([]int, len(a[i]))

		for j := range dist[i] {
			dist[i][j] = INF18
		}
	}

	di := []int{-1, -0, +1, +0}
	dj := []int{-0, -1, +0, +1}
	dist[s.a][s.b] = 0
	queue := []*pair{s}
	for len(queue) > 0 {
		p := queue[0]
		queue = queue[1:]

		for t := 0; t < 4; t++ {
			i, j := p.a+di[t], p.b+dj[t]
			d := dist[p.a][p.b] + 1

			if i < 0 || i == h || j < 0 || j == w || a[i][j] == '#' || dist[i][j] <= d {
				continue
			}
			dist[i][j] = d
			queue = append(queue, &pair{i, j})
		}
	}
	return
}

func solve(a [][]byte, t int) int {
	var s, g *pair
	o := make([]*pair, 0)
	for i := range a {
		for j, v := range a[i] {
			switch v {
			case 'S':
				s = &pair{i, j}
			case 'G':
				g = &pair{i, j}
			case 'o':
				o = append(o, &pair{i, j})
			}
		}
	}

	// s,oの間の最短距離をすべて調べる
	to := []*pair{s}
	if len(o) > 0 {
		to = append(to, o...)
	}

	// dist[i][j]はto[i]からto[j]に行くときの最短距離
	dist := make([][]int, len(to))

	for i, p := range to {
		dist[i] = make([]int, len(to))

		d := getdist(a, p)

		// たどり着けないケース
		if i == 0 && d[g.a][g.b] == INF18 {
			return -1
		}

		for j, q := range to {
			dist[i][j] = d[q.a][q.b]
		}
	}

	// dp[s][j]は頂点集合sに行ったことがあり、最後にjにいるときの最短距離
	dp := make([][]int, 1<<len(to))
	for i := range dp {
		dp[i] = make([]int, len(to))

		for j := range dp[i] {
			dp[i][j] = INF18
		}
	}

	// スタートのみ0
	dp[1<<0][0] = 0

	for pat := range dp {
		for i := range to {
			for j := range to {
				// いったことがあればもういい
				if nthbit(pat, j) == 1 {
					continue
				}
				// iにいてjに行くときの最短距離
				chmin(&dp[pat|(1<<j)][j], dp[pat][i]+dist[i][j])
			}
		}
	}

	// 全パターンについて、最後にたどり着いたマスからゴールに行ったときにちょうどtで到着できるか確認する。
	// 距離がt以下であることと、残りが偶数であることが必要
	dgoal := getdist(a, g)

	ans := -1
	for pat := range dp {
		for i, v := range dp[pat] {
			d := dgoal[to[i].a][to[i].b] + v
			if d <= t {
				// スタートの分引く
				chmax(&ans, popcount(pat)-1)
			}
		}
	}

	return ans
}

func calc() {
	h, _, t := in.NextInt3()
	a := make([][]byte, h)

	for i := 0; i < h; i++ {
		a[i] = in.NextBytes()
	}
	out.Println(solve(a, t))
}

func main() {
	// interactiveならfalseにすること。
	in, out = io.InitIo(true)
	defer out.Flush()

	calc()
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	"github.com/ywak/atcoder/lib/ds"
	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

func calc(in *io.In, out *io.Out) {
	m := map[int]int{0: 0}

	n, Q := in.NextInt2()
	a := in.NextInts(n)
	for _, v := range a {
		m[max(0, v-1)]++
		m[v]++
		m[v+1]++
	}

	is := make([]int, Q)
	xs := make([]int, Q)
	for q := 0; q < Q; q++ {
		is[q], xs[q] = in.NextInt2()
		is[q]--
		x := xs[q]
		m[max(x-1, 0)]++
		m[x]++
		m[x+1]++
	}
	math.Compress(m) //座圧
	ans := make([]int, len(m))
	for i, v := range m {
		ans[v] = i
	}
	type node struct{ x, c int }
	st := ds.NewIfSegmentTree()
	st.F.E = func() interface{} { return &node{INF18, INF18} }
	st.F.Calc = func(a, b interface{}) interface{} {
		if a == nil {
			return b
		}
		if b == nil {
			return a
		}
		aa, bb := a.(*node), b.(*node)
		var c *node
		if aa.c != 0 {
			c = bb
		} else if bb.c != 0 {
			c = aa
		} else if aa.x < bb.x {
			c = aa
		} else {
			c = bb
		}
		return &node{c.x, c.c}
	}
	arr := make([]*node, len(m))
	for i := range arr {
		arr[i] = &node{ans[i], 0}
	}
	for _, v := range a {
		arr[m[v]].c++
	}
	a2 := make([]interface{}, len(m))
	for i, v := range arr {
		a2[i] = v
	}
	st.InitAsArray(a2)
	for q := 0; q < Q; q++ {
		i, x := is[q], xs[q]

		x1 := m[a[i]]
		x2 := m[x]
		arr[x1].c--
		arr[x2].c++
		a[i] = x
		// debug(a)
		st.Update(x1, a2[x1])
		st.Update(x2, a2[x2])
		out.Println(st.All().(*node).x)
	}
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true, // インタラクティブならfalseにすること。
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

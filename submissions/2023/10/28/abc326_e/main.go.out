//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

const mod = math.Mod998244353

type SegmentTreeFunctions struct {
	// 単位元を返します
	e func() int
	// 計算結果を返します
	calc func(a, b int) int
}

type SegmentTree struct {
	// このsegment treeが管理するインデックスの範囲。[0, n)を管理する。
	n int

	// segment treeの各ノードの値を保持する配列
	nodes []int

	// このsegment treeの値を操作する関数群
	f SegmentTreeFunctions
}

// NewSegmentTreeは区間和を扱うSegmentTreeを返します。
// tested:
//
//	https://atcoder.jp/contests/abl/tasks/abl_d
func NewSegmentTree() *SegmentTree {
	return &SegmentTree{
		-1,
		[]int{},
		SegmentTreeFunctions{
			func() int { return 0 },
			func(a, b int) int { return a + b },
		},
	}
}

// initは[0, n)のsegment treeを初期化します。
// 各要素の値は単位元となります。
// tested:
//
//	https://atcoder.jp/contests/abl/tasks/abl_d
func (st *SegmentTree) init(n int) {
	// xはn*2を超える最小の2べき
	x := 1
	for x/2 < n+1 {
		x *= 2
	}
	st.n = x / 2
	st.nodes = make([]int, x)
	for i := 0; i < x; i++ {
		st.nodes[i] = st.f.e()
	}
}

// initAsArrayはvalsで配列を初期化します。
// 区間の長さはlen(vals)になります。
func (st *SegmentTree) initAsArray(vals []int) {
	n := len(vals)
	// xはn*2を超える最小の2べき
	x := 1
	for x/2 < n {
		x *= 2
	}
	st.n = x / 2
	st.nodes = make([]int, x)

	for i, v := range vals {
		st.nodes[i+st.n] = v
	}
}

// queryはi(0-based)番目の値を取得します。
// tested:
//
//	https://atcoder.jp/contests/abc253/tasks/abc253_f
func (st *SegmentTree) query(i int) int {
	t := i + st.n
	ret := st.nodes[t]

	for {
		t /= 2
		if t == 0 {
			break
		}
		ret = st.f.calc(ret, st.nodes[t])
	}
	return ret
}

// updateは[l, r) (0-based)の区間にvalueを適用します。
// tested:
//
//	https://atcoder.jp/contests/abc253/tasks/abc253_f
func (st *SegmentTree) update(l, r, value int) {
	for ll, rr := l+st.n, r+st.n; ll < rr; ll, rr = ll/2, rr/2 {
		if ll%2 == 1 {
			st.nodes[ll] = st.f.calc(st.nodes[ll], value)
			ll++
		}
		if rr%2 == 1 {
			rr--
			st.nodes[rr] = st.f.calc(st.nodes[rr], value)
		}
	}
}

func calc(in *io.In, out *io.Out) {
	n := in.NextInt()
	a := in.NextInts(n)

	ans := 0
	st := NewSegmentTree()
	st.f.calc = mod.Add
	st.init(n + 1)
	st.update(0, 1, 1)
	for i := 0; i < n; i++ {
		p := st.query(i)
		st.update(i+1, n+1, mod.Div(p, n))
		mod.Chadd(&ans, mod.Mul(a[i], st.query(i+1)))
	}

	out.Println(ans)
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true,
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

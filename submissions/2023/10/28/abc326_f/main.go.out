//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

type Node struct {
	parent *Node
	value  int
	plus   *Node
	minus  *Node
}

func calc(in *io.In, out *io.Out) {
	n, x, y := in.NextInt3()
	a := in.NextInts(n)
	mp := [][][]*Node{
		{
			{{value: 0}},
			{{value: 0}},
		},
		{
			{{value: 0}},
			{{value: 0}},
		},
	}

	for i, v := range a {
		u := []*Node{}
		p := i % 2
		j := chi(i < n/2, 0, 1)
		for _, parent := range mp[p][j] {
			parent.plus = &Node{
				parent: parent,
				value:  parent.value + v,
			}
			parent.minus = &Node{
				parent: parent,
				value:  parent.value - v,
			}
			u = append(u, parent.plus, parent.minus)
		}

		mp[p][j] = u
	}

	// 可能か？
	x1, x2, y1, y2 := -INF18, -INF18, -INF18, -INF18
	mx := map[int]*Node{}
	my := map[int]*Node{}
	for _, node := range mp[1][1] {
		mx[node.value] = node
	}
	for _, node := range mp[0][1] {
		my[node.value] = node
	}
	for i, p := range mp[0][0] {
		_y1 := p.value
		_y2 := y - _y1
		if _, ex := my[_y2]; ex {
			y1, y2 = i, _y2
			break
		}
	}
	for i, p := range mp[1][0] {
		_x1 := p.value
		_x2 := x - _x1
		if _, ex := mx[_x2]; ex {
			x1, x2 = i, _x2
			break
		}
	}
	ok := !(x1 == -INF18 || y1 == -INF18)
	out.YesNo(ok)

	reverse := func(a []int) []int {
		for i, j := 0, len(a)-1; i < j; i, j = i+1, j-1 {
			a[i], a[j] = a[j], a[i]
		}
		return a
	}

	if ok {
		// 復元
		xd := []int{}
		yd := []int{}
		for p := mx[x2]; p.parent != nil; p = p.parent {
			xd = append(xd, chi(p == p.parent.plus, 1, 3))
		}
		for p := mp[1][0][x1]; p.parent != nil; p = p.parent {
			xd = append(xd, chi(p == p.parent.plus, 1, 3))
		}
		for p := my[y2]; p.parent != nil; p = p.parent {
			yd = append(yd, chi(p == p.parent.plus, 0, 2))
		}
		for p := mp[0][0][y1]; p.parent != nil; p = p.parent {
			yd = append(yd, chi(p == p.parent.plus, 0, 2))
		}
		xd = reverse(xd)
		yd = reverse(yd)

		ans := []byte{}
		dir := 1
		for i := 0; i < n; i++ {
			nx := 0
			if i%2 == 0 {
				nx = yd[i/2]
			} else {
				nx = xd[i/2]
			}
			d := (nx - dir + 4) % 4
			if d == 1 {
				ans = append(ans, 'R')
			} else {
				ans = append(ans, 'L')
			}
			dir = nx
		}
		// check
		cx, cy := 0, 0
		dir = 1
		for i, v := range ans {
			dir = (4 + dir + chi(v == 'L', -1, +1)) % 4
			if dir == 0 {
				cy += a[i]
			} else if dir == 1 {
				cx += a[i]
			} else if dir == 2 {
				cy -= a[i]
			} else if dir == 3 {
				cx -= a[i]
			}
		}
		if cx != x || cy != y {
			panic(fmt.Sprintf("expected (%d, %d) but actual was (%d, %d)", x, y, cx, cy))
		}

		out.Println(string(ans))
	}
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true,
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

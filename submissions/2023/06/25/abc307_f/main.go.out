//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	"github.com/ywak/atcoder/lib/ds"
	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

type Edge struct {
	u, v, w, i int
}
type Affect struct {
	v, w, i int
}

func (e *Edge) from(u int) *Affect {
	v := e.v
	if u == e.v {
		v = e.u
	}
	return &Affect{v, e.w, e.i}
}

func calc(in *io.In, out *io.Out) {
	n, m := in.NextInt2()
	g := make([]map[int]bool, n)
	for i := range g {
		g[i] = map[int]bool{}
	}
	edges := make([]*Edge, m)
	for i := 0; i < m; i++ {
		u, v, w := in.NextInt3d(-1, -1, 0)
		e := &Edge{u, v, w, i}
		edges[i] = e
		g[u][i] = true
		g[v][i] = true
	}

	k := in.NextInt()
	a := in.NextInts(k)
	d := in.NextInt()
	xs := in.NextInts(d)

	debug(k, a, d, xs)
	used := make([]bool, m) // 辺が使用されたかどうか
	ans := make([]int, n)
	for i := range ans {
		ans[i] = -1
	}

	// 感染したら、その部屋から距離xにいる辺をすべてキューに追加する。
	queue := ds.NewPriorityQueue(func(a, b interface{}) bool {
		ea, eb := a.(*Affect), b.(*Affect)
		return ea.w < eb.w
	})

	for i := 0; i <= d; i++ {
		if i == 0 {
			// aが全員感染する
			for _, v := range a {
				v--
				ans[v] = 0
				debug(i, "affected", v)
				for j := range g[v] {
					if used[j] {
						continue
					}
					used[j] = true
					aff := edges[j].from(v)
					queue.Push(aff)
					delete(g[v], j)
					delete(g[aff.v], j)
				}
			}

			continue
		}
		// 距離がx[i]になるまで感染する。新規感染した辺を追加する
		x := xs[i-1]
		news := []int{} // 新しく感染した部屋
		// 感染する
		for queue.HasElements() && queue.Top().(*Affect).w <= x {
			aff := queue.Pop().(*Affect)
			news = append(news, aff.v)
		}
		for _, v := range news {
			ans[v] = i
			debug(i, "affected", v)

			// 感染拡大
			for j := range g[v] {
				if used[j] {
					continue
				}
				used[j] = true
				aff := edges[j].from(v)
				queue.Push(aff)
				delete(g[v], j)
				delete(g[aff.v], j)
			}
		}
	}

	for _, v := range ans {
		out.Println(v)
	}
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true,
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

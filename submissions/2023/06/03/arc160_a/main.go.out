//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"sort"
	"strings"

	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

var in *io.In
var out *io.Out

func calc() {
	n, k := in.NextInt2()
	a := in.NextInts(n)
	k-- // 0-indexedにする

	ans := make([]int, n)
	for i, head := range a {
		less := []int{}
		more := []int{}
		for _, v := range a[i+1:] {
			if v < head {
				less = append(less, v)
			} else {
				more = append(more, v)
			}
		}
		// 以降のパターンは、
		// 1. lessにある要素を先頭にするパターンがlen(less)通り
		// 2. headを先頭にするパターンが m * (m-1) / 2通り
		// 3. moreにある要素を戦闘にするパターンがlen(more)通り
		// このうち1,3のパターンは答えが確定する
		m := n - i - 1
		pat := m * (m - 1) / 2

		if len(less) <= k && k < len(less)+pat {
			// パターン2のときは先頭だけ確定させて次へ
			k -= len(less)
			ans[i] = head
			continue
		}
		var to int
		if k < len(less) {
			sort.Ints(less)
			for j := i + 1; j < n; j++ {
				if a[j] == less[k] {
					to = j
					break
				}
			}
		} else {
			k -= len(less) + pat
			sort.Ints(more)
			for j := i + 1; j < n; j++ {
				if a[j] == more[k] {
					to = j
					break
				}
			}
		}

		// 答えを確定させる。
		// 全部コピーしてから入れ替える
		for j := i; j < n; j++ {
			ans[j] = a[j]
		}
		for u, v := i, to; u < v; u, v = u+1, v-1 {
			ans[u], ans[v] = ans[v], ans[u]
		}

		break
	}

	out.PrintIntsLn(ans)
}

func main() {
	// interactiveならfalseにすること。
	in, out = io.InitIo(true)
	defer out.Flush()

	calc()
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

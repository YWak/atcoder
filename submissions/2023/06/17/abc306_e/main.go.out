//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"math/rand"
	"os"
	"strings"

	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

func calc(in *io.In, out *io.Out) {
	n, k, Q := in.NextInt3()
	a := make([]int, n)

	ans := 0
	if n == k {
		for i := 0; i < Q; i++ {
			x, y := in.NextInt2()
			x--
			ans += y - a[x]
			a[x] = y
			out.Println(ans)
		}
		return
	}

	upper := NewIntTreap()    // 上位k個の管理
	lower := NewRevIntTreap() // 下位n-k個の管理
	upper.Put(0, k)
	lower.Put(0, n-k)

	exists := func(m *Treap, t int) bool {
		c := m.Get(t)
		return c != nil && c != 0
	}
	exists(lower, 0)

	add := func(m *Treap, v int) {
		c := m.Get(v)
		if c == nil {
			m.Put(v, 1)
		} else {
			m.Put(v, c.(int)+1)
		}
	}
	sub := func(m *Treap, v int) {
		c := m.Get(v)
		if c == 1 {
			m.Remove(v)
		} else {
			m.Put(v, c.(int)-1)
		}
	}
	last := func(m *Treap) int {
		k, _ := m.GetKth(1)
		return k.(int)
	}

	for q := 0; q < Q; q++ {
		x, y := in.NextInt2()
		x--

		before := a[x]
		after := y
		a[x] = y

		u := last(upper)
		d := last(lower)

		debug(q+1, before, after, u, d)
		// 変化がなければそのまま
		if before == after {
			// nop
		} else if before >= u {
			if after >= d {
				// 上位にいてそのまま上位
				ans += after - before
				sub(upper, before)
				add(upper, after)
			} else {
				// 上位にいて下位に落ちる
				ans += d - before
				sub(upper, before)
				add(upper, d)
				sub(lower, d)
				add(lower, after)
			}
		} else if before <= d {
			if after < u {
				// 下位にいてそのまま下位
				sub(lower, before)
				add(lower, after)
			} else {
				// 下位にいて上位に上がる
				ans += after - u
				sub(upper, u)
				add(upper, after)
				sub(lower, before)
				add(lower, u)
			}
		} else {
			panic(fmt.Sprintf("%d: before = %d, after = %d, u = %d, d = %d", q+1, before, after, u, d))
		}
		out.Println(ans)
	}
}

type Treap struct {
	root *node
	// allowDup は、このTreapのキーとして重複を許すかどうか
	allowDup   bool
	comparator func(a, b interface{}) int
}

type node struct {
	key   interface{}
	value interface{}
	pri   int
	cnt   int
	left  *node
	right *node
}

func NewTreap(comparator func(a, b interface{}) int) *Treap {
	return &Treap{nil, false, comparator}
}

// NewIntTreap は、int型のキーを使用し、昇順に保存するTreapを作成して返します。
func NewIntTreap() *Treap {
	return NewTreap(func(a, b interface{}) int {
		aa, bb := a.(int), b.(int)
		if aa == bb {
			return 0
		}
		if aa < bb {
			return -1
		}
		return +1
	})
}

// NewRevIntTreap は、int型のキーを使用し、降順に保存するTreapを作成して返します。
func NewRevIntTreap() *Treap {
	return NewTreap(func(a, b interface{}) int {
		aa, bb := a.(int), b.(int)
		if aa == bb {
			return 0
		}
		if aa < bb {
			return +1
		}
		return -1
	})
}

// Len は、このTreapに含まれる要素の数を返します。
func (t *Treap) Len() int {
	return t._count(t.root)
}

// Get は、keyに対応する値を探して返します。 存在しない場合はnilを返します。
func (t *Treap) Get(key interface{}) interface{} {
	n := t.root
	for n != nil {
		c := t.comparator(key, n.key)
		if c == 0 {
			return n.value
		} else if c < 0 {
			n = n.left
		} else {
			n = n.right
		}
	}

	return nil
}

// GetKthは k (1-indexed)番目のキーと対応する値を返します。
// 該当する要素が存在しない場合は (nil, nil) を返します。
func (t *Treap) GetKth(k int) (interface{}, interface{}) {
	if k < 0 || t.Len() < k {
		return nil, nil
	}
	a, b := t._split(t.root, k)

	n := a
	var p *node = nil
	for n != nil {
		p = n
		n = n.right
	}
	if p == nil {
		return nil, nil
	}
	t.root = t._merge(a, b)

	return p.key, p.value
}

// Find は、key以下で最大のキーを返します。
// 対応するキーがなければnilを返します。
func (t *Treap) Find(key interface{}) interface{} {
	n := t.root
	var ans *node

	for n != nil {
		c := t.comparator(key, n.key)
		if c == 0 {
			return key
		}
		if c < 0 {
			n = n.left
		} else {
			ans = n
			n = n.right
		}
	}

	if ans == nil {
		return nil
	}
	return ans.key
}

// Put は、keyとそれに対応するvalueを保存し、古い値を返します。
// すでにキーが登録されている場合、allowDupがtrueなら挿入、falseなら上書きされます。
func (t *Treap) Put(key interface{}, value interface{}) interface{} {
	n, v := t._put(t.root, key, value, rand.Intn(1<<60))
	t.root = n
	t._update(t.root)

	return v
}

func (t *Treap) _put(n *node, key, value interface{}, pri int) (*node, interface{}) {
	if n == nil {
		return &node{key, value, pri, 1, nil, nil}, nil
	}
	c := t.comparator(key, n.key)
	if c == 0 && !t.allowDup {
		v := n.value
		n.value = value
		return n, v
	}
	if c <= 0 {
		nn, v := t._put(n.left, key, value, pri)
		n.left = nn
		if n.left.pri < n.pri {
			n = t._rotatel(n)
		}

		return t._update(n), v
	} else {
		nn, v := t._put(n.right, key, value, pri)
		n.right = nn
		if n.right.pri < n.pri {
			n = t._rotater(n)
		}
		return t._update(n), v
	}
}

func (t *Treap) _rotatel(n *node) *node {
	result := n.left
	x := result.right
	result.right = n
	n.left = x
	t._update(n)
	t._update(result)
	return result
}

func (t *Treap) _rotater(n *node) *node {
	result := n.right
	x := result.left
	result.left = n
	n.right = x
	t._update(n)
	t._update(result)
	return result
}

func (t *Treap) Remove(key interface{}) interface{} {
	n, v := t._remove(t.root, key)
	t.root = t._update(n)
	return v
}

func (t *Treap) _remove(n *node, key interface{}) (*node, interface{}) {
	if n == nil {
		return nil, nil
	}
	c := t.comparator(key, n.key)
	if c == 0 {
		// このノードを削除する
		v := n.value
		n = t._merge(n.left, n.right)
		t._update(n)
		return n, v
	}
	if c < 0 {
		r := n
		nn, v := t._remove(n.left, key)
		r.left = nn
		if r.left != nil && r.left.pri < r.pri {
			r = t._rotatel(r)
		}
		return t._update(r), v
	} else {
		r := n
		nn, v := t._remove(n.right, key)
		r.right = nn
		if r.right != nil && r.right.pri < r.pri {
			r = t._rotater(r)
		}
		return t._update(r), v
	}
}

func (t *Treap) _count(n *node) int {
	if n == nil {
		return 0
	}
	return n.cnt
}

func (t *Treap) _update(n *node) *node {
	if n != nil {
		n.cnt = t._count(n.left) + t._count(n.right) + 1
	}

	return n
}

func (t *Treap) _merge(l, r *node) *node {
	if l == nil || r == nil {
		if r == nil {
			return l
		} else {
			return r
		}
	}
	if l.pri < r.pri {
		l.right = t._merge(l.right, r)
		return t._update(l)
	} else {
		r.left = t._merge(l, r.left)
		return t._update(r)
	}
}

func (t *Treap) _split(n *node, nth int) (*node, *node) {
	if n == nil {
		return nil, nil
	}
	if nth <= t._count(n.left) {
		a, b := t._split(n.left, nth)
		n.left = b
		return a, t._update(n)
	} else {
		a, b := t._split(n.right, nth-t._count(n.left)-1)
		n.right = a
		return t._update(n), b
	}
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true,
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

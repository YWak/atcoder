//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	"github.com/ywak/atcoder/lib/ds"
	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

func calc(in *io.In, out *io.Out) {
	type point struct{ x, y int }
	h, w := in.NextInt2()
	a := make([][]int, h)
	for i := 0; i < h; i++ {
		a[i] = in.NextInts(w)
	}

	dt := []int{0, -1, 0, +1, 0}
	isOut := func(x, y int) bool {
		return x < 0 || x == h || y < 0 || y == w
	}

	bfs := func(sx, sy int) [][]*point {
		cost := ds.NewInt2d(h, w, INF18)
		cost[sx][sy] = 0
		prev := make([][]*point, h)
		for i := 0; i < h; i++ {
			prev[i] = make([]*point, w)
		}

		queue := []*point{{sx, sy}}
		for len(queue) > 0 {
			p := queue[0]
			queue = queue[1:]

			for t := 0; t < 4; t++ {
				x, y := p.x+dt[t], p.y+dt[t+1]
				if isOut(x, y) {
					continue
				}
				_c := cost[p.x][p.y] + a[x][y]
				if cost[x][y] <= _c {
					continue
				}
				cost[x][y] = _c
				prev[x][y] = p
				queue = append(queue, &point{x, y})
			}
		}

		return prev
	}

	list := [][][]*point{bfs(h-1, 0), bfs(0, w-1), bfs(h-1, w-1)}
	ans := INF18
	for midh := 0; midh < h; midh++ {
		for midw := 0; midw < w; midw++ {
			b := ds.NewInt2d(h, w, 0)
			for i := 0; i < h; i++ {
				copy(b[i], a[i])
			}
			s1 := point{midh, midw}
			c := 0
			for _, prev := range list {
				for p := &s1; p != nil; p = prev[p.x][p.y] {
					c += b[p.x][p.y]
					b[p.x][p.y] = 0
				}
			}

			chmin(&ans, c)
		}
	}

	out.Println(ans)
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true,
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

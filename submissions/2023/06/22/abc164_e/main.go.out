//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	"github.com/ywak/atcoder/lib/ds"
	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

// 銀貨は最大でもn*max(a) == 2500あればいい。
const mcoin = 2500

func solve(n, m, s int, u, v, a, b, c, d []int) []int {
	s = min(s, mcoin) // 上限を定める

	// 都市xにいて銀貨をy枚もっている状態
	id := func(x, y int) int {
		return x*(mcoin+1) + y
	}

	g := ds.NewGraph(id(n, 0)) // n番目がないのでこれで十分
	// 各都市について、銀貨が0枚からmcoin枚まで遷移する方法を追加する
	for x := 0; x < n; x++ {
		for y := 0; y < mcoin; y++ {
			next := min(y+c[x], mcoin)
			g.AddDirectedWeightedEdge(id(x, y), id(x, next), d[x])
		}
	}
	// 各辺について、銀貨が足りる場合の遷移を追加する
	for i := 0; i < m; i++ {
		x1, x2 := u[i], v[i]
		for y := mcoin; y-a[i] >= 0; y-- {
			next := y - a[i]
			g.AddDirectedWeightedEdge(id(x1, y), id(x2, next), b[i])
			g.AddDirectedWeightedEdge(id(x2, y), id(x1, next), b[i])
		}
	}
	dist := g.Dijkstra(id(0, s)) // s枚もっていて都市0から始まる
	ret := []int{}
	for x := 1; x < n; x++ {
		ans := INF18
		// t := -1
		for y := 0; y <= mcoin; y++ {
			// if ans > dist.Costs[id(x, y)] {
			// 	t = id(x, y)
			// }
			chmin(&ans, dist.Costs[id(x, y)])
		}

		ret = append(ret, ans)
		// route := []string{}
		// for p := t; p != -1; p = dist.Prevs[p] {
		// 	q := dist.Prevs[p]
		// 	if q == -1 {
		// 		break
		// 	}

		// 	nx, ny := p/(mcoin+1), p%(mcoin+1)
		// 	px, py := q/(mcoin+1), q%(mcoin+1)

		// 	if px == nx {
		// 		// 両替
		// 		route = append(route, fmt.Sprintf("両替 on %d (%d -> %d). cost = %d", px+1, py, ny, dist.Costs[p]))
		// 	} else {
		// 		// 移動
		// 		route = append(route, fmt.Sprintf("移動 %d -> %d (%d -> %d). cost = %d", px+1, nx+1, py, ny, dist.Costs[p]))
		// 	}
		// }
		// for i, j := 0, len(route)-1; i < j; i, j = i+1, j-1 {
		// 	route[i], route[j] = route[j], route[i]
		// }
		// debug("route to", x, strings.Join(route, ", "))
	}

	return ret
}

func calc(in *io.In, out *io.Out) {
	n, m, s := in.NextInt3()

	u := make([]int, m)
	v := make([]int, m)
	a := make([]int, m)
	b := make([]int, m)
	c := make([]int, n)
	d := make([]int, n)

	for i := 0; i < m; i++ {
		u[i], v[i] = in.NextInt2d(-1, -1)
		a[i], b[i] = in.NextInt2()
	}
	for i := 0; i < n; i++ {
		c[i], d[i] = in.NextInt2()
	}

	for _, ans := range solve(n, m, s, u, v, a, b, c, d) {
		out.Println(ans)
	}
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true,
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

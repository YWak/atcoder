//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	"github.com/ywak/atcoder/lib/ds"
	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

func calc(in *io.In, out *io.Out) {
	h, w := in.NextInt2()
	a := make([][]byte, h)

	var start, goal, ans = -1, -1, INF18
	idx := func(x, y int) int { return x*w + y }
	for i := 0; i < h; i++ {
		a[i] = in.NextBytes()

		for j := 0; j < w; j++ {
			if a[i][j] == 'S' {
				a[i][j] = '0'
				start = idx(i, j)
			}
			if a[i][j] == 'G' {
				a[i][j] = '9' + 1
				goal = idx(i, j)
			}
		}
	}

	g := ds.NewGraph(h * w)
	for x1 := range a {
		for y1, v := range a[x1] {
			cost := ds.NewInt2d(h, w, INF18)
			cost[x1][y1] = 0

			// bfs
			queue := []int{idx(x1, y1)}
			for len(queue) > 0 {
				p := queue[0]
				x, y := p/w, p%w
				queue = queue[1:]

				dt := []int{0, -1, 0, +1, 0}
				for t := 0; t < 4; t++ {
					xx, yy := x+dt[t], y+dt[t+1]
					if xx < 0 || xx == h || yy < 0 || yy == w {
						continue
					}
					if cost[xx][yy] < cost[x][y]+1 {
						queue = append(queue, xx*w+yy)
					}
				}
			}

			// 全探索
			for x2 := range a {
				for y2, w := range a[x2] {
					if v+1 == w {
						g.AddDirecedWeightedEdge(idx(x1, y1), idx(x2, y2), cost[x2][y2])
					}
				}
			}
			d := g.Dijkstra(start)

			chmax(&ans, d.Costs[goal])
		}
	}

	if ans == INF18 {
		ans = -1
	}
	out.Println(ans)
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true,
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(xx, n, m int) int {
	return math.Powmod(xx, n, m)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	"github.com/ywak/atcoder/lib/ds"
	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

const mod = math.Mod998244353

func calc(in *io.In, out *io.Out) {
	pats := []int{0, 3, 5, 6} // ある桁で取れるbitのパターン 000,011,101,110

	n := in.NextInt()
	a := in.NextInts(3)

	keta := 1
	for 1<<(keta-1) <= n {
		keta++
	}

	dp := ds.NewInt3d(keta+1, 1000, 64, 0)
	dp[keta][0][0b000111] = 1

	m := make([]int, 3)
	isMax := make([]bool, 3)
	hasOne := make([]bool, 3)

	for i := keta; i > 0; i-- {
		ii := i - 1
		for j := range dp[i] {
			ok1 := true
			for t, v := range a {
				m[t] = j / pow(10, t) % 10
				ok1 = ok1 && m[t] < v
			}
			if !ok1 {
				continue
			}

			for k := range dp[i][j] {
				for t := range a {
					isMax[t] = nthbit(k, t) == 1
					hasOne[t] = nthbit(k, t+3) == 1
				}

				for _, p := range pats {
					// 最大値フラグが立っていて、nのビットが0なのに1を要求されたら無理
					ok2 := true
					for t := range a {
						if isMax[t] && nthbit(n, ii) == 0 && nthbit(p, t) == 1 {
							ok2 = false
						}
					}
					if !ok2 {
						continue
					}

					// 各あまりの管理
					jj := 0
					for t, v := range a {
						jj += ((m[t] + nthbit(p, t)<<ii) % v) * pow(10, t)
					}

					kk := 0
					for t := range a {
						// 最大値フラグは、現在立っていてnと同じ値になるとき立つ
						if isMax[t] && nthbit(n, ii) == nthbit(p, t) {
							kk |= 1 << t
						}
						// ゼロフラグは、もともと0で設定されるビットも0のときに立つ
						if hasOne[t] || nthbit(p, t) == 1 {
							kk |= 1 << (t + 3)
						}
					}
					mod.Chadd(&dp[ii][jj][kk], dp[i][j][k])
				}
			}
		}
	}

	// 最大値フラグに拘らず、0ビット目まで決まっていてあまりがすべて0のときを考えればいい
	ans := 0
	for s, v := range dp[0][0] {
		if s&0b111000 == 0b111000 {
			mod.Chadd(&ans, v)
		}
	}

	// 0を含む値を引く
	out.Println(ans)
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true,
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

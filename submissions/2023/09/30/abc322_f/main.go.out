//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

func calc(in *io.In, out *io.Out) {
	n, Q := in.NextInt2()
	s := in.NextBytes()
	arr := make([]int, n)
	for i, v := range s {
		arr[i] = int(v - '0')
	}

	st := NewLazySegmentTree(
		func(a, b int) int { return a + b },
		func(f, x int) int { return (f + x) % 2 },
		func(f, g int) int { return f + g },
		func() int { return 0 },
		func() int { return 0 },
	)
	st.initByArray(arr)
	for q := 0; q < Q; q++ {
		c, l, r := in.NextInt3()
		l--
		if c == 1 {
			st.update(l, r, 1)
		} else {
			out.Println(st.query(l, r))
		}
	}
}

type LazySegmentTree struct {
	// initは長さnの配列として初期化します
	init func(n int) *LazySegmentTree

	// initByArrayはarrとして初期化します。
	initByArray func(arr []int) *LazySegmentTree

	// updateは[l, r)をvで更新します。
	update func(l, r, v int)

	// queryは[l, r)の値を返します。
	query func(l, r int) int

	// allは全区間の値を返します。
	all func() int
}

// NewLazySegmentTreeは遅延評価セグメントツリーの実装を返します。
func NewLazySegmentTree(
	operate func(a, b int) int,
	mapping func(f, x int) int,
	composition func(f, g int) int,
	e func() int,
	id func() int,
) *LazySegmentTree {
	st := &LazySegmentTree{}
	var log int
	var size int
	var data []int
	var lazy []int

	update := func(k int) {
		data[k] = operate(data[k*2+0], data[k*2+1])
	}

	// 初期化
	// tested:
	//   https://atcoder.jp/contests/typical90/tasks/typical90_ac
	st.init = func(n int) *LazySegmentTree {
		arr := make([]int, n)
		for i := 0; i < n; i++ {
			arr[i] = e()
		}
		return st.initByArray(arr)
	}

	// 配列による初期化
	// tested:
	//   https://atcoder.jp/contests/typical90/tasks/typical90_ac
	st.initByArray = func(arr []int) *LazySegmentTree {
		n := len(arr)
		size = 1
		log = 0
		for size < n {
			size *= 2
			log++
		}
		data = make([]int, size*2)
		for i := 0; i < n; i++ {
			data[size+i] = arr[i]
		}
		for i := size - 1; i >= 1; i-- {
			update(i)
		}
		lazy = make([]int, size)
		for i := range lazy {
			lazy[i] = id()
		}

		return st
	}

	applyAll := func(k int, f int) {
		data[k] = mapping(f, data[k])
		if k < size {
			lazy[k] = composition(f, lazy[k])
		}
	}
	push := func(k int) {
		applyAll(2*k+0, lazy[k])
		applyAll(2*k+1, lazy[k])
		lazy[k] = id()
	}
	// [l, r)の値を取得する。
	// tested:
	//   https://atcoder.jp/contests/typical90/tasks/typical90_ac
	st.query = func(l, r int) int {
		if l == r {
			return e()
		}
		l, r = l+size, r+size
		for i := log; i >= 1; i-- {
			if (l>>i)<<i != l {
				push(l >> i)
			}
			if (r>>i)<<i != r {
				push(r >> i)
			}
		}
		sml, smr := e(), e()
		for l < r {
			if l%2 == 1 {
				sml = operate(sml, data[l])
				l++
			}
			if r%2 == 1 {
				r--
				smr = operate(data[r], smr)
			}
			l >>= 1
			r >>= 1
		}

		return operate(sml, smr)
	}

	// [l, r)の値をvで更新する
	// tested:
	//   https://atcoder.jp/contests/typical90/tasks/typical90_ac
	st.update = func(l, r, v int) {
		if l == r {
			return
		}
		l, r = l+size, r+size
		for i := log; i >= 1; i-- {
			if (l>>i)<<i != l {
				push(l >> i)
			}
			if (r>>i)<<i != r {
				push((r - 1) >> i)
			}
		}
		ll, rr := l, r
		for ll < rr {
			if ll%2 == 1 {
				applyAll(ll, v)
				ll++
			}
			if rr%2 == 1 {
				rr--
				applyAll(rr, v)
			}
			ll >>= 1
			rr >>= 1
		}
		for i := 1; i <= log; i++ {
			if (l>>i)<<i != l {
				update(l >> i)
			}
			if (r>>i)<<i != r {
				update((r - 1) >> i)
			}
		}
	}

	return st
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true,
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

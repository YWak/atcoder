//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	"github.com/ywak/atcoder/lib/ds"
	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

type ByteMatrix struct {
	buf [][]byte
}

func (mat *ByteMatrix) Read(n, m int, in *io.In) {
	mat.buf = make([][]byte, n)
	for i := 0; i < n; i++ {
		mat.buf[i] = in.NextBytes()
	}
}

func (mat *ByteMatrix) Trim() {
	for t := 0; t < 2; t++ {
		rows := make([][]byte, 0)
		for _, row := range mat.buf {
			ok := false
			for _, v := range row {
				if v == '#' {
					ok = true
					break
				}
			}
			if ok {
				rows = append(rows, row)
			}
		}
		mat.buf = rows
		rot := mat.Rotate()
		mat.buf = rot.buf
	}
}

func (mat *ByteMatrix) debug() {
	for _, v := range mat.buf {
		debug(string(v))
	}
}

func (mat *ByteMatrix) Rotate() *ByteMatrix {
	rot := &ByteMatrix{}
	rot.buf = make([][]byte, len(mat.buf[0]))
	for i := 0; i < len(rot.buf); i++ {
		rot.buf[i] = make([]byte, len(mat.buf))
	}

	for i, row := range mat.buf {
		for j, v := range row {
			rot.buf[j][len(mat.buf)-1-i] = v
		}
	}

	return rot
}

func calc(in *io.In, out *io.Out) {
	p := make([][]*ByteMatrix, 3)
	for i := 0; i < 3; i++ {
		p[i] = make([]*ByteMatrix, 4)
		p[i][0] = &ByteMatrix{}
		p[i][0].Read(4, 4, in)
		p[i][0].Trim()
		for j := 1; j < 4; j++ {
			p[i][j] = p[i][j-1].Rotate()
		}
	}

	var dfs func(field [][]int, ps [][]*ByteMatrix) bool
	dfs = func(field [][]int, ps [][]*ByteMatrix) bool {
		if len(ps) == 0 {
			ok := true
			for i := 0; i < 4; i++ {
				debug(field[i])
				for j := 0; j < 4; j++ {
					ok = ok && field[i][j] == 1
				}
			}
			debug("========")
			return ok
		}

		// 4パターンについて、すべての開始位置で試す
		for _, p := range ps[0] {
			for i := 0; i < 4; i++ {
				if i+len(p.buf) >= 4 {
					continue
				}
				for j := 0; j < 4; j++ {
					if j+len(p.buf[0]) >= 4 {
						continue
					}

					f := ds.NewInt2d(4, 4, 0)
					for ii := 0; ii < 4; ii++ {
						for jj := 0; jj < 4; jj++ {
							f[ii][jj] = field[ii][jj]
						}
					}

					for ii := range p.buf {
						for jj, v := range p.buf[ii] {
							if v == '#' {
								f[i+ii][j+jj]++
							}
						}
					}
					if dfs(f, ps[1:]) {
						return true
					}
				}
			}
		}

		return false
	}

	out.YesNo(dfs(ds.NewInt2d(4, 4, 0), p))
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true,
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) {
	math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) {
	math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

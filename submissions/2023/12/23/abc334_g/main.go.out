//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	"github.com/ywak/atcoder/lib/ds"
	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

const mod = math.Mod998244353

func calc(in *io.In, out *io.Out) {
	h, w := in.NextInt2()

	s := make([][]byte, h)
	isOut := func(i, j int) bool {
		return i < 0 || i == h || j < 0 || j == w
	}
	greens := 0
	for i := 0; i < h; i++ {
		s[i] = in.NextBytes()
		for _, b := range s[i] {
			if b == '#' {
				greens++
			}
		}
	}

	// 連結成分の数を数える
	groups := ds.NewInt2d(h, w, -1)
	var dfs1 func(x, y int)
	d := []int{0, -1, 0, +1, 0}
	dfs1 = func(i, j int) {
		for t := 0; t < 4; t++ {
			ii, jj := i+d[t], j+d[t+1]
			if isOut(ii, jj) || s[ii][jj] == '.' || groups[ii][jj] != -1 {
				continue
			}
			groups[ii][jj] = groups[i][j]
			dfs1(ii, jj)
		}
	}
	c := 0
	for i := 0; i < h; i++ {
		for j := 0; j < w; j++ {
			if s[i][j] == '#' && groups[i][j] == -1 {
				groups[i][j] = c
				dfs1(i, j)
				c++
			}
		}
	}

	// 関節店かどうかを調べる
	ord := ds.NewInt2d(h, w, -1)
	low := ds.NewInt2d(h, w, INF18)
	root := ds.NewBool2d(h, w, false)
	u := 0
	var dfs2 func(i, j int)
	dfs2 = func(i, j int) {
		ord[i][j] = u
		u++

		for t := 0; t < 4; t++ {
			ii, jj := i+d[t], j+d[t+1]
			if isOut(ii, jj) || s[ii][jj] == '.' || groups[ii][jj] != groups[i][j] {
				continue
			}
			if ord[ii][jj] == -1 {
				// まだ行っていない
				dfs2(ii, jj)
			} else {
				// もう行った == dfsで使われない辺になっている
				chmin(&low[i][j], ord[ii][jj])
			}
		}
	}
	for i := 0; i < h; i++ {
		for j := 0; j < w; j++ {
			if s[i][j] == '#' && ord[i][j] == -1 {
				// まだ行っていない
				root[i][j] = true
				dfs2(i, j)
			}
		}
	}

	ans := 0
	for i := 0; i < h; i++ {
		for j := 0; j < w; j++ {
			if isKansetsu(i, j) {
				// 分離後の数が
			}
		}
	}
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true, // インタラクティブならfalseにすること。
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) bool {
	return math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) bool {
	return math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

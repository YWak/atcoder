//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

func common(a0, a1, b0, b1 int) (int, int) {
	// [a0, a1]と[b0,b1]の共通部分を返します。
	if a0 > a1 {
		a0, a1 = a1, a0
	}
	if b0 > b1 {
		b0, b1 = b1, b0
	}
	if a0 > b0 {
		a0, a1, b0, b1 = b0, b1, a0, a1
	}
	if a1 <= b0 {
		return 0, 0
	}
	return max(a0, b0), min(a1, b1)
}

func calc(in *io.In, out *io.Out) {
	V1, V2, V3 := in.NextInt3()

	for a1 := -7; a1 <= 7; a1++ {
		for a2 := -7; a2 <= 7; a2++ {
			for a3 := -7; a3 <= 7; a3++ {
				for c1 := -7; c1 <= 7; c1++ {
					for c2 := -7; c2 <= 7; c2++ {
						for c3 := -7; c3 <= 7; c3++ {
							// b1,b2,b3 = 0,0,0
							// 2つの共通部分
							ab10, ab11 := common(0, 7, a1, a1+7)
							ab20, ab21 := common(0, 7, a2, a2+7)
							ab30, ab31 := common(0, 7, a3, a3+7)
							bc10, bc11 := common(0, 7, c1, c1+7)
							bc20, bc21 := common(0, 7, c2, c2+7)
							bc30, bc31 := common(0, 7, c3, c3+7)
							ac10, ac11 := common(a1, a1+7, c1, c1+7)
							ac20, ac21 := common(a2, a2+7, c2, c2+7)
							ac30, ac31 := common(a3, a3+7, c3, c3+7)

							// 3つの共通部分
							abc10, abc11 := common(a1, a1+7, bc10, bc11)
							abc20, abc21 := common(a2, a2+7, bc20, bc21)
							abc30, abc31 := common(a3, a3+7, bc30, bc31)

							vabc := (abc11 - abc10) * (abc21 - abc20) * (abc31 - abc30)
							vab := (ab11 - ab10) * (ab21 - ab20) * (ab31 - ab30)
							vac := (ac11 - ac10) * (ac21 - ac20) * (ac31 - ac30)
							vbc := (bc11 - bc10) * (bc21 - bc20) * (bc31 - bc30)
							v3 := vabc
							v2 := vab + vac + vbc - vabc*3
							v1 := 7*7*7*3 - v2*2 - v3*3
							if v1 == V1 && v2 == V2 && v3 == V3 {
								out.YesNo(true)
								out.Println(a1, a2, a3, 7, 7, 7, c1, c2, c3)
								return
							}
						}
					}
				}
			}
		}
	}

	out.YesNo(false)
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true, // インタラクティブならfalseにすること。
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) bool {
	return math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) bool {
	return math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

type SegmentTree[V any] struct {
	// Initは[0, n)のsegment treeを初期化します。
	// 各要素の値は単位元となります。
	// tested:
	//
	//	https://atcoder.jp/contests/abl/tasks/abl_d
	Init func(n int) *SegmentTree[V]

	// InitAsArrayはvalsで配列を初期化します。
	// 区間の長さはlen(vals)になります。
	// tested:
	//
	//	https://judge.yosupo.jp/problem/staticrmq
	InitAsArray func(arr []V) *SegmentTree[V]

	// Updateはi(0-based)番目の値をvalueに更新します。
	// tested:
	//
	//	https://atcoder.jp/contests/abl/tasks/abl_d
	Update func(i int, value V)

	// Queryは[l, r) (0-based)の計算値を返します。
	// tested:
	//
	//	https://atcoder.jp/contests/abl/tasks/abl_d
	Query func(l, r int) V
}

// NewSegmentTreeは区間和を扱うSegmentTreeを返します。
// tested:
//
//	https://atcoder.jp/contests/abl/tasks/abl_d
func NewSegmentTree[V any](
	calc func(a, b, ab *V),
	e func() V,
) *SegmentTree[V] {
	st := SegmentTree[V]{}
	var nodes []V
	var size int
	init := func(n int) *SegmentTree[V] {
		// xはn*2を超える最小の2べき
		x := 1
		for x/2 < n+1 {
			x *= 2
		}
		size = x / 2
		nodes = make([]V, x)
		for i := 0; i < x; i++ {
			nodes[i] = e()
		}
		return &st
	}
	initAsArray := func(vals []V) *SegmentTree[V] {
		init(len(vals))

		for i, v := range vals {
			nodes[i+size] = v
		}
		for i := size - 1; i > 0; i-- {
			calc(&nodes[i*2], &nodes[i*2+1], &nodes[i])
		}

		return &st
	}
	st.Update = func(i int, value V) {
		t := i + size
		nodes[t] = value

		for {
			t /= 2
			if t == 0 {
				break
			}
			calc(&nodes[t*2], &nodes[t*2+1], &nodes[t])
		}
	}
	st.Query = func(l, r int) V {
		ret := e()
		for ll, rr := l+size, r+size; ll < rr; ll, rr = ll/2, rr/2 {
			if ll%2 == 1 {
				calc(&ret, &nodes[ll], &ret)
				ll++
			}
			if rr%2 == 1 {
				rr--
				calc(&nodes[rr], &ret, &ret)
			}
		}

		return ret
	}

	st.Init = init
	st.InitAsArray = initAsArray

	return &st
}

func calc(in *io.In, out *io.Out) {
	type info struct {
		first, count1, second, count2 int
	}

	n, Q := in.NextInt2()
	st := NewSegmentTree[info](
		func(a, b, ab *info) {
			var first, second, count1, count2 int
			if a.first == b.first {
				first = a.first
				count1 = a.count1 + b.count1
				if a.second == b.second {
					second = a.second
					count2 = a.count2 + b.count2
				} else if a.second < b.second {
					second = b.second
					count2 = b.count2
				} else {
					second = a.second
					count2 = a.count2
				}
			} else if a.first < b.first {
				first = b.first
				count1 = b.count1
				if a.first == b.second {
					second = b.second
					count2 = a.count1 + b.count2
				} else if a.first < b.second {
					second = b.second
					count2 = b.count2
				} else {
					second = a.first
					count2 = a.count1
				}
			} else { // a.first > b.first
				first = a.first
				count1 = a.count1
				if a.second == b.first {
					second = a.second
					count2 = a.count2 + b.count1
				} else if a.second < b.first {
					second = b.first
					count2 = b.count1
				} else {
					second = a.second
					count2 = a.count2
				}
			}
			ab.first = first
			ab.count1 = count1
			ab.second = second
			ab.count2 = count2
		},
		func() info { return info{0, 0, 0, 0} },
	).Init(n)
	a := in.NextInts(n)
	for i, v := range a {
		st.Update(i, info{first: v, count1: 1, second: 0, count2: 0})
	}

	for q := 0; q < Q; q++ {
		t := in.NextInt()
		if t == 1 {
			p, x := in.NextInt2()
			p--
			st.Update(p, info{first: x, count1: 1})
		} else {
			l, r := in.NextInt2()
			l--
			ans := st.Query(l, r)
			out.Println(ans.count2)
		}
	}
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true, // インタラクティブならfalseにすること。
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) bool {
	return math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) bool {
	return math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	"github.com/ywak/atcoder/lib/ds"
	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

func calc(in *io.In, out *io.Out) {
	n, m := in.NextInt2()
	uf := ds.NewWeightedUnionFind(n)
	for i := 0; i < m; i++ {
		a, b, c := in.NextInt3()
		a--
		b--
		uf.Merge(b, a, c)
	}

	// グループを求める
	used := map[int]bool{}
	type group struct {
		order int
		u     []int
		w     []int
	}

	gs := []*group{}
	for i := 0; i < n; i++ {
		r := uf.Root(i)
		if used[r] {
			continue
		}
		used[r] = true

		g := group{0, []int{}, []int{}}
		gs = append(gs, &g)

		for j := i; j < n; j++ {
			if uf.Root(j) == r {
				g.u = append(g.u, j)
				g.w = append(g.w, uf.Diff(i, j))
			}
		}
		for l := range g.u {
			for r := l + 1; r < len(g.u); r++ {
				if g.w[l] > g.w[r] {
					g.w[l], g.w[r] = g.w[r], g.w[l]
					g.u[l], g.u[r] = g.u[r], g.u[l]
				}
			}
		}
		offset := g.w[0]
		for j := range g.u {
			g.w[j] -= offset
			g.order |= 1 << g.w[j]
		}
		// debug(g)
	}

	// dp[s][g][i]は順位の集合sが使用済みでグループgが適用されているとき、iの順位としてあり得る順位
	dp := ds.NewInt3d(1<<n, len(gs)+1, n, 0)
	pats := []int{0}
	for j, g := range gs {
		pats2 := map[int]bool{}
		for _, s := range pats {
			// このグループの覆う区間
			for t := 0; t < n; t++ {
				nx := g.order << t
				if nx >= 1<<n {
					break
				}

				// 重複があれば次へ
				if s&nx != 0 {
					continue
				}

				// nxが採用可能なので、全順位をコピーし、グループ内の順位を適用する
				for u := 0; u < n; u++ {
					dp[s|nx][j+1][u] |= dp[s][j][u]
				}

				// 今回増える人の分を適用する
				for i, u := range g.u {
					dp[s|nx][j+1][u] |= 1 << (g.w[i] + t)
				}
				pats2[s|nx] = true
			}
		}
		pats = []int{}
		for v := range pats2 {
			pats = append(pats, v)
		}
	}

	ans := make([]int, n)
	last := dp[1<<n-1][len(gs)]
	order := map[int]int{}
	for i := 0; i < n; i++ {
		order[1<<i] = i + 1
	}
	// i番目の人はj番目の人との順位が決まっているか？
	for i, pat := range last {
		// debug(i, fmt.Sprintf("%010b", pat))
		if v, ex := order[pat]; ex {
			ans[i] = v
		} else {
			ans[i] = -1
		}
	}

	out.PrintIntsLn(ans)
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true, // インタラクティブならfalseにすること。
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) bool {
	return math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) bool {
	return math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

func calc(in *io.In, out *io.Out) {
	n := in.NextInt()
	s := in.NextBytes()
	s = append(s, '.', '.')
	t := in.NextBytes()
	t = append(t, '.', '.')

	decode := func(s int) []byte {
		ans := []byte{}
		for i := 0; i < n+2; i++ {
			switch s % 3 {
			case 0:
				ans = append(ans, '.')
			case 1:
				ans = append(ans, 'B')
			case 2:
				ans = append(ans, 'W')
			}
			s /= 3
		}
		return ans
	}
	encode := func(b []byte) int {
		ans := 0
		for i := n + 1; i >= 0; i-- {
			ans *= 3
			switch b[i] {
			case '.':
				ans += 0
			case 'B':
				ans += 1
			case 'W':
				ans += 2
			}
		}
		return ans
	}

	head := map[int]int{}
	tail := map[int]int{}

	bfs := func(start int, state map[int]int) {
		state[start] = 0
		queue := []int{start}
		for len(queue) > 0 {
			q := queue[0]
			queue = queue[1:]

			b := decode(q)
			k := -1
			for i, v := range b {
				if v == '.' {
					k = i
					break
				}
			}
			// 適当に入れ替える
			for i := 0; i < len(b)-1; i++ {
				if abs(k-i) <= 1 {
					continue
				}
				b[i], b[i+1], b[k], b[k+1] = b[k], b[k+1], b[i], b[i+1]
				next := encode(b)
				b[i], b[i+1], b[k], b[k+1] = b[k], b[k+1], b[i], b[i+1]
				score := state[q] + 1
				if _, ex := state[next]; !ex {
					state[next] = score

					if score < 7 {
						queue = append(queue, next)
					}
				}
			}
		}
	}
	bfs(encode(s), head)
	bfs(encode(t), tail)

	ans := INF18
	for p, v1 := range head {
		if v2, ex := tail[p]; ex {
			chmin(&ans, v1+v2)
		}
	}
	if ans == INF18 {
		ans = -1
	}
	out.Println(ans)
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true, // インタラクティブならfalseにすること。
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) bool {
	return math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) bool {
	return math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

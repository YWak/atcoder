//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	rbt "github.com/emirpasic/gods/trees/redblacktree"
	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

// Vは扱う値、Xは保持する値、Fは適用する値
type DualSegmentTree[V, X, F any] struct {
	Init func(n int) *DualSegmentTree[V, X, F]

	Update func(l, r int, value F)

	Query func(i int) V
}

func NewDualSegmentTree[V, X, F any](
	// mappingは値vにxを適用した結果を保存します。
	mapping func(x *X, v *V),

	// compositionはxに関数fを適用した結果を保存します。
	composition func(f *F, x *X),

	// eは値の初期値を返します。
	e func() V,

	// idはXの初期値を返します。
	id func() X,
) *DualSegmentTree[V, X, F] {
	st := &DualSegmentTree[V, X, F]{}
	size := 1
	var nodes []X
	st.Init = func(n int) *DualSegmentTree[V, X, F] {
		log := 0
		for size < n {
			size *= 2
			log++
		}
		nodes = make([]X, size*2)
		for i := range nodes {
			nodes[i] = id()
		}

		return st
	}

	st.Query = func(i int) V {
		value := e()
		for t := i + size; t > 0; t /= 2 {
			mapping(&nodes[t], &value)
		}
		return value
	}

	st.Update = func(l, r int, value F) {
		for ll, rr := l+size, r+size; ll < rr; ll, rr = ll/2, rr/2 {
			if ll%2 == 1 {
				composition(&value, &nodes[ll])
				ll++
			}
			if rr%2 == 1 {
				rr--
				composition(&value, &nodes[rr])
			}
		}
	}

	return st
}

func operate(x *rbt.Tree, v *int) {
	if x.Size() > 0 {
		chmax(v, x.Right().Key.(int))
	}
}

func composition(f *int, x *rbt.Tree) {
	if *f < 0 {
		// 削除
		k := -(*f)
		c, _ := x.Get(k)
		if c == 1 {
			x.Remove(k)
		} else {
			x.Put(k, c.(int)-1)
		}
	} else {
		// 追加
		k := *f
		c, ex := x.Get(k)
		if !ex {
			x.Put(k, 1)
		} else {
			x.Put(k, c.(int)+1)
		}
	}
}

func calc(in *io.In, out *io.Out) {
	st := NewDualSegmentTree[int, rbt.Tree, int](
		operate,
		composition,
		func() int {
			return 0
		},
		func() rbt.Tree {
			return *rbt.NewWithIntComparator()
		},
	)
	n := in.NextInt()
	a := in.NextInts(n)

	st.Init(n)
	for i, v := range a {
		st.Update(i, i+1, v)
	}

	Q := in.NextInt()
	type Query struct{ l, r, x int }
	hist := map[int]*Query{}
	for q := 0; q < Q; q++ {
		t := in.NextInt()

		switch t {
		case 1:
			l, r, x := in.NextInt3()
			l--
			st.Update(l, r, x)
			hist[q] = &Query{l, r, x}
		case 2:
			h := hist[in.NextInt()-1]
			st.Update(h.l, h.r, -h.x)
		case 3:
			out.Println(st.Query(in.NextInt() - 1))
		}
	}
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true, // インタラクティブならfalseにすること。
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) bool {
	return math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) bool {
	return math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

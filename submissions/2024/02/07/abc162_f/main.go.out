//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"strings"

	"github.com/ywak/atcoder/lib/ds"
	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

func calc(in *io.In, out *io.Out) {
	n := in.NextInt()
	a := in.NextInts(n)

	// dp[i][j][k]はi番目まで見たときに直前を選んでj(0: いない, 1: いる)、
	// かつ選ばない連続箇所がk回選べるときの和の最大値
	dp := ds.NewInt3d(n+1, 2, 3, -INF18)
	c := ds.NewInt3d(n+1, 2, 3, 0)

	// 連続して選ばない箇所の数を指定する
	if n%2 == 0 {
		// 偶数かつ最初を選ぶと1回猶予がある
		dp[1][1][1] = a[0]
		c[1][1][1] = 1
		// 偶数かつ最初を選ばない場合は0回の猶予がある
		dp[1][0][0] = 0
	} else {
		// 奇数かつ最初を選ぶと2回猶予がある
		dp[1][1][2] = a[0]
		c[1][1][2] = 1
		// 奇数かつ最初を選ばない場合は1回猶予がある
		dp[1][0][1] = 0
	}

	for i := 1; i < n; i++ {
		for k := 0; k < 3; k++ {
			// 選ぶケース
			if chmax(&dp[i+1][1][k], dp[i][0][k]+a[i]) {
				c[i+1][1][k] = c[i][0][k] + 1
			}

			// 選ばないケースは2パターンある
			// 直前に選んでいる場合は選んではいけない
			if chmax(&dp[i+1][0][k], dp[i][1][k]) {
				c[i+1][0][k] = c[i][1][k]
			}

			// 連続して選ばないケース
			if k > 0 {
				if chmax(&dp[i+1][0][k-1], dp[i][0][k]) {
					c[i+1][0][k-1] = c[i][0][k]
				}
			}
		}
	}

	ans := -INF18
	for j := range dp[n] {
		for k, v := range dp[n][j] {
			if c[n][j][k] == n/2 {
				chmax(&ans, v)
			}
		}
	}

	out.Println(ans)
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true, // インタラクティブならfalseにすること。
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) bool {
	return math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) bool {
	return math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

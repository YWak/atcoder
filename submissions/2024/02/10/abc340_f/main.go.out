//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/big"
	"math/bits"
	"os"
	"strings"

	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

func calc(in *io.In, out *io.Out) {
	x, y := in.NextInt2()

	if x == 0 || y == 0 {
		a, b := 0, 0
		if x == 0 {
			if abs(y) == 1 {
				a = 2
			} else if abs(y) == 2 {
				a = 1
			}
		} else if y == 0 {
			if abs(x) == 1 {
				b = 2
			} else if abs(x) == 2 {
				b = 1
			}
		} else {
			out.Println(-1)
		}

		out.Println(a, b)
		return
	}

	// 拡張ユークリッドの互除法
	// a - b*c
	cl := func(a, b, c *big.Int) *big.Int {
		bc := new(big.Int).Mul(b, c)
		return new(big.Int).Sub(a, bc)
	}

	xp, xc := big.NewInt(1), big.NewInt(0)
	yp, yc := big.NewInt(0), big.NewInt(1)
	zp, zc := big.NewInt(int64(abs(x))), big.NewInt(int64(abs(y)))

	for zc.Cmp(big.NewInt(0)) != 0 {
		q := new(big.Int).Div(zp, zc)
		_zc := cl(zp, q, zc)
		zp, zc = zc, _zc

		if zc.Cmp(big.NewInt(0)) == 0 {
			break
		}
		_xc, _yc := cl(xp, q, xc), cl(yp, q, yc)
		xp, xc = xc, _xc
		yp, yc = yc, _yc
	}

	b, a, g := xc, yc, zp.Int64()
	// debug(x, y, a, b, g)
	if g == 1 {
		a = a.Mul(a, big.NewInt(2))
		b = b.Mul(b, big.NewInt(2))
	} else if g == 2 {
		// そのまま計算すればいい
	} else {
		out.Println(-1)
		return
	}
	b.Mul(b, big.NewInt(-1))
	// debug(x, y, a, b)
	if x < 0 {
		a = a.Mul(a, big.NewInt(-1))
	}
	if y < 0 {
		b = b.Mul(b, big.NewInt(-1))
	}

	s1 := new(big.Int).Mul(big.NewInt(int64(x)), b)
	s2 := new(big.Int).Mul(big.NewInt(int64(y)), a)
	s := new(big.Int).Sub(s1, s2)
	s = s.Abs(s)
	debug("s * 2 =", s.Int64(), s1, s2)

	out.Println(a.Int64(), b.Int64())
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true, // インタラクティブならfalseにすること。
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) bool {
	return math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) bool {
	return math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}

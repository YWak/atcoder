//lint:file-ignore U1000 using template
package main

import (
	"fmt"
	gomath "math"
	"math/bits"
	"os"
	"sort"
	"strings"

	io "github.com/ywak/atcoder/lib/io"
	"github.com/ywak/atcoder/lib/math"
)

func calc(in *io.In, out *io.Out) {
	dx := make([]int, 256)
	dy := make([]int, 256)
	dy['U'] = +1
	dy['D'] = -1
	dx['L'] = -1
	dx['R'] = +1

	type item struct {
		i, x, y, c int
	}
	type pair struct {
		x, y int
	}
	// x座標,y座標を決めたときの商品の列
	item_x := map[int][]*item{}
	item_y := map[int][]*item{}
	hist := map[pair]int{}

	n, m := in.NextInt2()
	sx, sy := in.NextInt2()

	// スタート地点を記録する
	item_x[sx] = append(item_x[sx], &item{-1, sx, sy, 0})
	item_y[sy] = append(item_y[sy], &item{-1, sx, sy, 0})
	hist[pair{sx, sy}]++

	for i := 0; i < n; i++ {
		x, y := in.NextInt2()
		item_x[x] = append(item_x[x], &item{i, x, y, 0})
		item_y[y] = append(item_y[y], &item{i, x, y, 0})
		hist[pair{x, y}]++
	}

	// 道中行動記録がいる
	type move struct{ sx, sy, tx, ty int }
	ts := []*move{}

	for i := 0; i < m; i++ {
		d := in.NextBytes()[0]
		c := in.NextInt()

		xx, yy := sx+dx[d]*c, sy+dy[d]*c
		if _, ex := hist[pair{xx, yy}]; !ex {
			item_x[xx] = append(item_x[xx], &item{-(i + 2), xx, yy, 0})
			item_y[yy] = append(item_y[yy], &item{-(i + 2), xx, yy, 0})
		}
		ts = append(ts, &move{sx, sy, xx, yy})
		sx, sy = xx, yy
	}

	// ソート
	for k, v := range item_x {
		sort.Slice(v, func(i, j int) bool {
			ii, ij := v[i], v[j]
			return ii.y < ij.y
		})
		item_x[k] = v
	}
	for k, v := range item_y {
		sort.Slice(v, func(i, j int) bool {
			ii, ij := v[i], v[j]
			return ii.x < ij.x
		})
		item_y[k] = v
	}

	// listのなかで、getterが返す値がv以上であるようなitemを返します。
	itemof := func(list []*item, v int, getter func(item *item) int) *item {
		ng, ok := -1, len(list)
		for abs(ok-ng) > 1 {
			mid := (ok + ng) / 2
			if getter(list[mid]) >= v {
				ok = mid
			} else {
				ng = mid
			}
		}
		if ok == len(list) {
			return nil
		}
		return list[ok]
	}

	// 各移動ごとに対応する範囲を書き込みます。
	for _, mv := range ts {
		var getter func(item *item) int
		var list []*item
		var from, to int

		if mv.sy == mv.ty {
			// [sx, tx]の範囲にある商品について記録する。
			getter = func(item *item) int {
				return item.x
			}
			list = item_y[sy]
			from, to = mv.sx, mv.tx
		} else {
			// [sy, ty]の範囲にある商品について記録する。
			getter = func(item *item) int {
				return item.y
			}
			list = item_x[sx]
			from, to = mv.sy, mv.ty
		}
		// debug(sx, sy, tx, ty)
		if item := itemof(list, from, getter); item != nil {
			item.c++
			// debug("mark +1", item.i)
		}
		if item := itemof(list, to, getter); item != nil {
			item.c--
			// debug("mark -1", item.i)
		}
	}

	// listごとに通ったかどうかを判定する
	ans := map[int]int{}
	for _, mp := range []map[int][]*item{item_x, item_y} {
		for _, list := range mp {
			s := 0
			for _, t := range list {
				s += t.c
				if s > 0 && t.i >= 0 {
					ans[t.i]++
				}
			}
		}
	}
	// debug(ans)
	out.Println(sx, sy, len(ans))
}

func main() {
	in, out := io.InitIo(&io.InitIoProps{
		DoBuffer: true, // インタラクティブならfalseにすること。
		ReadLine: false,
	})
	defer out.Flush()

	calc(in, out)
}

var isDebugMode = os.Getenv("AT_DEBUG") == "1"

func debug(args ...interface{}) {
	if isDebugMode {
		fmt.Fprintln(os.Stderr, args...)
	}
}

// ==================================================
// 数値操作
// ==================================================

// INF18 は最大値を表す数
const INF18 = math.INF18

// INF9 は最大値を表す数
const INF9 = math.INF9

// N10_6は10^6
const N10_6 = math.N10_6

// max は aとbのうち大きい方を返します。
func max(a, b int) int {
	return math.Max(a, b)
}

// min は aとbのうち小さい方を返します。
func min(a, b int) int {
	return math.Min(a, b)
}

// chmax は aとbのうち大きい方をaに設定します。
func chmax(a *int, b int) bool {
	return math.Chmax(a, b)
}

// chmin は aとbのうち小さい方をaに設定します。
func chmin(a *int, b int) bool {
	return math.Chmin(a, b)
}

// abs は aの絶対値を返します。
func abs(a int) int {
	return math.Abs(a)
}

// pow は aのb乗を返します。
func pow(a, b int) int {
	return math.Pow(a, b)
}

// divceil は a/b の結果を正の無限大に近づけるように丸めて返します。
func divceil(a, b int) int {
	return math.Divceil(a, b)
}

// divfloor は a/b の結果を負の無限大に近づけるように丸めて返します。
func divfloor(a, b int) int {
	return math.Divfloor(a, b)
}

// powmod は (x^n) mod m を返します。
func powmod(x, n, m int) int {
	return math.Powmod(x, n, m)
}

// gcdはaとbの最大公約数を返します。
func gcd(a, b int) int {
	return math.Gcd(a, b)
}

// lcmはaとbの最小公倍数を返します。
func lcm(a, b int) int {
	return math.Lcm(a, b)
}

// sqrtはx^2 <= aとなる最大のaを返します。
func sqrt(a int) int {
	return math.Sqrt(a)
}

// chiはcondがtrueのときok, falseのときngを返します。
func chi(cond bool, ok, ng int) int {
	if cond {
		return ok
	}
	return ng
}

// chbはcondがtrueのときok, falseのときngを返します。
func chb(cond bool, ok, ng byte) byte {
	if cond {
		return ok
	}
	return ng
}

// chsはcondがtrueのときok, falseのときngを返します。
func chs(cond bool, ok, ng string) string {
	if cond {
		return ok
	}
	return ng
}

// extmulはa*bの結果を返します。
// 2つ目の値が+1ならオーバーフロー、-1ならアンダーフローが発生したことを表します。
func extmul(a, b int) (int, int) {
	if a < 0 {
		a, b = -a, -b
	}
	if a == 0 || b == 0 {
		return 0, 0
	} else if a > 0 && b > 0 && a > gomath.MaxInt64/b {
		return 0, +1
	} else if a > gomath.MinInt64/b {
		return 0, -1
	}
	return a * b, 0
}

// ==================================================
// ビット操作
// ==================================================

// nthbit はaのn番目のビットを返します。
func nthbit(a int, n int) int { return int((a >> uint(n)) & 1) }

// popcount はaのうち立っているビットを数えて返します。
func popcount(a int) int {
	return bits.OnesCount(uint(a))
}

func xor(a, b bool) bool { return a != b }

// ==================================================
// 文字列操作
// ==================================================

// toLowerCase は sをすべて小文字にした文字列を返します。
func toLowerCase(s string) string {
	return strings.ToLower(s)
}

// toUpperCase は sをすべて大文字にした文字列を返します。
func toUpperCase(s string) string {
	return strings.ToUpper(s)
}

// isLower はbが小文字かどうかを判定します
func isLower(b byte) bool {
	return 'a' <= b && b <= 'z'
}

// isUpper はbが大文字かどうかを判定します
func isUpper(b byte) bool {
	return 'A' <= b && b <= 'Z'
}
